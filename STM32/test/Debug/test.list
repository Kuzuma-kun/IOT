
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004c50  08004c50  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c50  08004c50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000070  08004cc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004cc8  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f703  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267a  00000000  00000000  0002f79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00031e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00032c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019655  00000000  00000000  00033a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7c1  00000000  00000000  0004d065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb1a  00000000  00000000  0005c826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb340  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004718  00000000  00000000  000eb394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004aa4 	.word	0x08004aa4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004aa4 	.word	0x08004aa4

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <command_parser>:

enum parser_state {WAITING_START, WAITING_END};

enum parser_state parserState = WAITING_START;

void command_parser(uint8_t temp) {
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	4603      	mov	r3, r0
 8000168:	71fb      	strb	r3, [r7, #7]
	switch(parserState) {
 800016a:	4b1f      	ldr	r3, [pc, #124]	; (80001e8 <command_parser+0x88>)
 800016c:	781b      	ldrb	r3, [r3, #0]
 800016e:	2b00      	cmp	r3, #0
 8000170:	d002      	beq.n	8000178 <command_parser+0x18>
 8000172:	2b01      	cmp	r3, #1
 8000174:	d00a      	beq.n	800018c <command_parser+0x2c>
			command[command_index++] = temp;
			if (command_index == COMMAND_SIZE) command_index = 0;
		}
		break;
	}
}
 8000176:	e032      	b.n	80001de <command_parser+0x7e>
		if (temp == '!') {
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	2b21      	cmp	r3, #33	; 0x21
 800017c:	d12c      	bne.n	80001d8 <command_parser+0x78>
			parserState = WAITING_END;
 800017e:	4b1a      	ldr	r3, [pc, #104]	; (80001e8 <command_parser+0x88>)
 8000180:	2201      	movs	r2, #1
 8000182:	701a      	strb	r2, [r3, #0]
			command_index = 0;
 8000184:	4b19      	ldr	r3, [pc, #100]	; (80001ec <command_parser+0x8c>)
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
		break;
 800018a:	e025      	b.n	80001d8 <command_parser+0x78>
		if (temp == '#') {
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	2b23      	cmp	r3, #35	; 0x23
 8000190:	d10b      	bne.n	80001aa <command_parser+0x4a>
			command[command_index] = '\0';
 8000192:	4b16      	ldr	r3, [pc, #88]	; (80001ec <command_parser+0x8c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a16      	ldr	r2, [pc, #88]	; (80001f0 <command_parser+0x90>)
 8000198:	2100      	movs	r1, #0
 800019a:	54d1      	strb	r1, [r2, r3]
			parserState = WAITING_START;
 800019c:	4b12      	ldr	r3, [pc, #72]	; (80001e8 <command_parser+0x88>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
			command_done = 1;
 80001a2:	4b14      	ldr	r3, [pc, #80]	; (80001f4 <command_parser+0x94>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	701a      	strb	r2, [r3, #0]
		break;
 80001a8:	e018      	b.n	80001dc <command_parser+0x7c>
		} else if (temp == '!') {
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	2b21      	cmp	r3, #33	; 0x21
 80001ae:	d103      	bne.n	80001b8 <command_parser+0x58>
			command_index = 0;
 80001b0:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <command_parser+0x8c>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
		break;
 80001b6:	e011      	b.n	80001dc <command_parser+0x7c>
			command[command_index++] = temp;
 80001b8:	4b0c      	ldr	r3, [pc, #48]	; (80001ec <command_parser+0x8c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	490b      	ldr	r1, [pc, #44]	; (80001ec <command_parser+0x8c>)
 80001c0:	600a      	str	r2, [r1, #0]
 80001c2:	490b      	ldr	r1, [pc, #44]	; (80001f0 <command_parser+0x90>)
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	54ca      	strb	r2, [r1, r3]
			if (command_index == COMMAND_SIZE) command_index = 0;
 80001c8:	4b08      	ldr	r3, [pc, #32]	; (80001ec <command_parser+0x8c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b32      	cmp	r3, #50	; 0x32
 80001ce:	d105      	bne.n	80001dc <command_parser+0x7c>
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <command_parser+0x8c>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
		break;
 80001d6:	e001      	b.n	80001dc <command_parser+0x7c>
		break;
 80001d8:	bf00      	nop
 80001da:	e000      	b.n	80001de <command_parser+0x7e>
		break;
 80001dc:	bf00      	nop
}
 80001de:	bf00      	nop
 80001e0:	370c      	adds	r7, #12
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bc80      	pop	{r7}
 80001e6:	4770      	bx	lr
 80001e8:	20000094 	.word	0x20000094
 80001ec:	20000090 	.word	0x20000090
 80001f0:	2000012c 	.word	0x2000012c
 80001f4:	2000008c 	.word	0x2000008c

080001f8 <is_command_done>:

uint8_t is_command_done() {
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	return command_done;
 80001fc:	4b02      	ldr	r3, [pc, #8]	; (8000208 <is_command_done+0x10>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	2000008c 	.word	0x2000008c

0800020c <reset_command>:

void reset_command() {
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	command_done = 0;
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <reset_command+0x14>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	2000008c 	.word	0x2000008c

08000224 <get_command>:

char* get_command() {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	return command;
 8000228:	4b02      	ldr	r3, [pc, #8]	; (8000234 <get_command+0x10>)
}
 800022a:	4618      	mov	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	2000012c 	.word	0x2000012c

08000238 <HAL_UART_RxCpltCallback>:

static uint8_t temp = 0;
uint8_t buffer_flag = 0;
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART2) {
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <HAL_UART_RxCpltCallback+0x38>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d10e      	bne.n	8000268 <HAL_UART_RxCpltCallback+0x30>
		//TODO HERE
		//gui nguoc lai len terminal
//		HAL_UART_Transmit(huart, &temp, 1, 50);
//		buffer[index_buffer++] = temp;
//		if (index_buffer == MAX_BUFFER_SIZE) index_buffer = 0;
		buffer_flag = 1;
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <HAL_UART_RxCpltCallback+0x3c>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, &temp, 1,1000);
 8000250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000254:	2201      	movs	r2, #1
 8000256:	4908      	ldr	r1, [pc, #32]	; (8000278 <HAL_UART_RxCpltCallback+0x40>)
 8000258:	4808      	ldr	r0, [pc, #32]	; (800027c <HAL_UART_RxCpltCallback+0x44>)
 800025a:	f002 fd04 	bl	8002c66 <HAL_UART_Transmit>
		//ENABLE LAI INTERRUPT
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800025e:	2201      	movs	r2, #1
 8000260:	4905      	ldr	r1, [pc, #20]	; (8000278 <HAL_UART_RxCpltCallback+0x40>)
 8000262:	4807      	ldr	r0, [pc, #28]	; (8000280 <HAL_UART_RxCpltCallback+0x48>)
 8000264:	f002 fd91 	bl	8002d8a <HAL_UART_Receive_IT>
	}

}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40004400 	.word	0x40004400
 8000274:	20000096 	.word	0x20000096
 8000278:	20000095 	.word	0x20000095
 800027c:	20000190 	.word	0x20000190
 8000280:	20000250 	.word	0x20000250

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028a:	f000 fcf9 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028e:	f000 f863 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000292:	f000 f98f 	bl	80005b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000296:	f000 f8ed 	bl	8000474 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800029a:	f000 f961 	bl	8000560 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800029e:	f000 f935 	bl	800050c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80002a2:	f000 f8a9 	bl	80003f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002a6:	4824      	ldr	r0, [pc, #144]	; (8000338 <main+0xb4>)
 80002a8:	f002 f8fc 	bl	80024a4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 80002ac:	4823      	ldr	r0, [pc, #140]	; (800033c <main+0xb8>)
 80002ae:	f000 fe21 	bl	8000ef4 <HAL_ADC_Start>


  int adc_value = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_timer(0, 1000, 10);
 80002b6:	220a      	movs	r2, #10
 80002b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 fc1b 	bl	8000af8 <init_timer>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80002c2:	2201      	movs	r2, #1
 80002c4:	491e      	ldr	r1, [pc, #120]	; (8000340 <main+0xbc>)
 80002c6:	481f      	ldr	r0, [pc, #124]	; (8000344 <main+0xc0>)
 80002c8:	f002 fd5f 	bl	8002d8a <HAL_UART_Receive_IT>

  while (1)
  {
	  if (get_timer_flag(0) == 1) {
 80002cc:	2000      	movs	r0, #0
 80002ce:	f000 fc2f 	bl	8000b30 <get_timer_flag>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d11b      	bne.n	8000310 <main+0x8c>
		  HAL_GPIO_TogglePin(GPIOA, Led_power_Pin);
 80002d8:	2120      	movs	r1, #32
 80002da:	481b      	ldr	r0, [pc, #108]	; (8000348 <main+0xc4>)
 80002dc:	f001 fba8 	bl	8001a30 <HAL_GPIO_TogglePin>
//		  HAL_UART_Transmit(&huart1, &tempp, 1, 1000);
		  adc_value = HAL_ADC_GetValue(&hadc1);
 80002e0:	4816      	ldr	r0, [pc, #88]	; (800033c <main+0xb8>)
 80002e2:	f000 feb5 	bl	8001050 <HAL_ADC_GetValue>
 80002e6:	4603      	mov	r3, r0
 80002e8:	607b      	str	r3, [r7, #4]
//		  HAL_UART_Transmit(&huart1, (uint8_t*)str, sprintf(str, "%d\r\n", adc_value), 1000);
		  HAL_UART_Transmit(&huart2, (uint8_t*)str, sprintf(str, "!%d#\n", adc_value), 1000);
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	4917      	ldr	r1, [pc, #92]	; (800034c <main+0xc8>)
 80002ee:	4818      	ldr	r0, [pc, #96]	; (8000350 <main+0xcc>)
 80002f0:	f003 f9d6 	bl	80036a0 <siprintf>
 80002f4:	4603      	mov	r3, r0
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fc:	4914      	ldr	r1, [pc, #80]	; (8000350 <main+0xcc>)
 80002fe:	4811      	ldr	r0, [pc, #68]	; (8000344 <main+0xc0>)
 8000300:	f002 fcb1 	bl	8002c66 <HAL_UART_Transmit>
		  init_timer(0, 1000, 10);
 8000304:	220a      	movs	r2, #10
 8000306:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800030a:	2000      	movs	r0, #0
 800030c:	f000 fbf4 	bl	8000af8 <init_timer>

	  }
	  if (buffer_flag == 1) {
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <main+0xd0>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d107      	bne.n	8000328 <main+0xa4>
//		  HAL_UART_Transmit(&huart1, &temp, 1, 1000);
		  command_parser(temp);
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <main+0xbc>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff1f 	bl	8000160 <command_parser>
		  buffer_flag = 0;
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <main+0xd0>)
 8000324:	2200      	movs	r2, #0
 8000326:	701a      	strb	r2, [r3, #0]
	  }
	  if (is_command_done()) {
 8000328:	f7ff ff66 	bl	80001f8 <is_command_done>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0cc      	beq.n	80002cc <main+0x48>
		  uart_comm();
 8000332:	f000 fc13 	bl	8000b5c <uart_comm>
	  if (get_timer_flag(0) == 1) {
 8000336:	e7c9      	b.n	80002cc <main+0x48>
 8000338:	20000208 	.word	0x20000208
 800033c:	20000160 	.word	0x20000160
 8000340:	20000095 	.word	0x20000095
 8000344:	20000250 	.word	0x20000250
 8000348:	40010800 	.word	0x40010800
 800034c:	08004abc 	.word	0x08004abc
 8000350:	20000098 	.word	0x20000098
 8000354:	20000096 	.word	0x20000096

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b094      	sub	sp, #80	; 0x50
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f003 f992 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000390:	2310      	movs	r3, #16
 8000392:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000394:	2300      	movs	r3, #0
 8000396:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039c:	4618      	mov	r0, r3
 800039e:	f001 fb61 	bl	8001a64 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80003a8:	f000 f946 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fdcc 	bl	8001f64 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003d2:	f000 f931 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003d6:	2302      	movs	r3, #2
 80003d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80003da:	2300      	movs	r3, #0
 80003dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 ff59 	bl	8002298 <HAL_RCCEx_PeriphCLKConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003ec:	f000 f924 	bl	8000638 <Error_Handler>
  }
}
 80003f0:	bf00      	nop
 80003f2:	3750      	adds	r7, #80	; 0x50
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_ADC1_Init+0x74>)
 800040a:	4a19      	ldr	r2, [pc, #100]	; (8000470 <MX_ADC1_Init+0x78>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <MX_ADC1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <MX_ADC1_Init+0x74>)
 8000416:	2201      	movs	r2, #1
 8000418:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_ADC1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_ADC1_Init+0x74>)
 8000422:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000426:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_ADC1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_ADC1_Init+0x74>)
 8000430:	2201      	movs	r2, #1
 8000432:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <MX_ADC1_Init+0x74>)
 8000436:	f000 fc85 	bl	8000d44 <HAL_ADC_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000440:	f000 f8fa 	bl	8000638 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000444:	2300      	movs	r3, #0
 8000446:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000448:	2301      	movs	r3, #1
 800044a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4619      	mov	r1, r3
 8000454:	4805      	ldr	r0, [pc, #20]	; (800046c <MX_ADC1_Init+0x74>)
 8000456:	f000 fe07 	bl	8001068 <HAL_ADC_ConfigChannel>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000460:	f000 f8ea 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000160 	.word	0x20000160
 8000470:	40012400 	.word	0x40012400

08000474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000488:	463b      	mov	r3, r7
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000490:	4b1d      	ldr	r3, [pc, #116]	; (8000508 <MX_TIM2_Init+0x94>)
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_TIM2_Init+0x94>)
 800049a:	224f      	movs	r2, #79	; 0x4f
 800049c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_TIM2_Init+0x94>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_TIM2_Init+0x94>)
 80004a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_TIM2_Init+0x94>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <MX_TIM2_Init+0x94>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004b8:	4813      	ldr	r0, [pc, #76]	; (8000508 <MX_TIM2_Init+0x94>)
 80004ba:	f001 ffa3 	bl	8002404 <HAL_TIM_Base_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004c4:	f000 f8b8 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	4619      	mov	r1, r3
 80004d4:	480c      	ldr	r0, [pc, #48]	; (8000508 <MX_TIM2_Init+0x94>)
 80004d6:	f002 f939 	bl	800274c <HAL_TIM_ConfigClockSource>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004e0:	f000 f8aa 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e4:	2300      	movs	r3, #0
 80004e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004ec:	463b      	mov	r3, r7
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_TIM2_Init+0x94>)
 80004f2:	f002 fb01 	bl	8002af8 <HAL_TIMEx_MasterConfigSynchronization>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004fc:	f000 f89c 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000500:	bf00      	nop
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000208 	.word	0x20000208

0800050c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000512:	4a12      	ldr	r2, [pc, #72]	; (800055c <MX_USART1_UART_Init+0x50>)
 8000514:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800051c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000532:	220c      	movs	r2, #12
 8000534:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_USART1_UART_Init+0x4c>)
 8000544:	f002 fb42 	bl	8002bcc <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800054e:	f000 f873 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000190 	.word	0x20000190
 800055c:	40013800 	.word	0x40013800

08000560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <MX_USART2_UART_Init+0x50>)
 8000568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 800056c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 8000586:	220c      	movs	r2, #12
 8000588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <MX_USART2_UART_Init+0x4c>)
 8000598:	f002 fb18 	bl	8002bcc <HAL_UART_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005a2:	f000 f849 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000250 	.word	0x20000250
 80005b0:	40004400 	.word	0x40004400

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_GPIO_Init+0x5c>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a10      	ldr	r2, [pc, #64]	; (8000610 <MX_GPIO_Init+0x5c>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_GPIO_Init+0x5c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_power_Pin|LED_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2160      	movs	r1, #96	; 0x60
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <MX_GPIO_Init+0x60>)
 80005e6:	f001 fa0b 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_power_Pin LED_Pin */
  GPIO_InitStruct.Pin = Led_power_Pin|LED_Pin;
 80005ea:	2360      	movs	r3, #96	; 0x60
 80005ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_GPIO_Init+0x60>)
 8000602:	f001 f883 	bl	800170c <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	40010800 	.word	0x40010800

08000618 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000628:	d102      	bne.n	8000630 <HAL_TIM_PeriodElapsedCallback+0x18>
		run_timer(0);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fa3c 	bl	8000aa8 <run_timer>
	}
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <HAL_MspInit+0x5c>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_MspInit+0x5c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x5c>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x5c>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_MspInit+0x60>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_MspInit+0x60>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010000 	.word	0x40010000

080006a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_ADC_MspInit+0x6c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d121      	bne.n	800070c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_ADC_MspInit+0x70>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <HAL_ADC_MspInit+0x70>)
 80006ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_ADC_MspInit+0x70>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <HAL_ADC_MspInit+0x70>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <HAL_ADC_MspInit+0x70>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_ADC_MspInit+0x70>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f8:	2301      	movs	r3, #1
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	2303      	movs	r3, #3
 80006fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <HAL_ADC_MspInit+0x74>)
 8000708:	f001 f800 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40012400 	.word	0x40012400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000730:	d113      	bne.n	800075a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_TIM_Base_MspInit+0x44>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <HAL_TIM_Base_MspInit+0x44>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_TIM_Base_MspInit+0x44>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	201c      	movs	r0, #28
 8000750:	f000 fef5 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000754:	201c      	movs	r0, #28
 8000756:	f000 ff0e 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a3f      	ldr	r2, [pc, #252]	; (8000880 <HAL_UART_MspInit+0x118>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d13a      	bne.n	80007fe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000788:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <HAL_UART_MspInit+0x11c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a3d      	ldr	r2, [pc, #244]	; (8000884 <HAL_UART_MspInit+0x11c>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <HAL_UART_MspInit+0x11c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a0:	4b38      	ldr	r3, [pc, #224]	; (8000884 <HAL_UART_MspInit+0x11c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a37      	ldr	r2, [pc, #220]	; (8000884 <HAL_UART_MspInit+0x11c>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <HAL_UART_MspInit+0x11c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4619      	mov	r1, r3
 80007cc:	482e      	ldr	r0, [pc, #184]	; (8000888 <HAL_UART_MspInit+0x120>)
 80007ce:	f000 ff9d 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	4619      	mov	r1, r3
 80007e6:	4828      	ldr	r0, [pc, #160]	; (8000888 <HAL_UART_MspInit+0x120>)
 80007e8:	f000 ff90 	bl	800170c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2025      	movs	r0, #37	; 0x25
 80007f2:	f000 fea4 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007f6:	2025      	movs	r0, #37	; 0x25
 80007f8:	f000 febd 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fc:	e03c      	b.n	8000878 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <HAL_UART_MspInit+0x124>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d137      	bne.n	8000878 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <HAL_UART_MspInit+0x11c>)
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <HAL_UART_MspInit+0x11c>)
 800080e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000812:	61d3      	str	r3, [r2, #28]
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_UART_MspInit+0x11c>)
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_UART_MspInit+0x11c>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a17      	ldr	r2, [pc, #92]	; (8000884 <HAL_UART_MspInit+0x11c>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_UART_MspInit+0x11c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000838:	2304      	movs	r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0318 	add.w	r3, r7, #24
 8000848:	4619      	mov	r1, r3
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <HAL_UART_MspInit+0x120>)
 800084c:	f000 ff5e 	bl	800170c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000850:	2308      	movs	r3, #8
 8000852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <HAL_UART_MspInit+0x120>)
 8000864:	f000 ff52 	bl	800170c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2026      	movs	r0, #38	; 0x26
 800086e:	f000 fe66 	bl	800153e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000872:	2026      	movs	r0, #38	; 0x26
 8000874:	f000 fe7f 	bl	8001576 <HAL_NVIC_EnableIRQ>
}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40013800 	.word	0x40013800
 8000884:	40021000 	.word	0x40021000
 8000888:	40010800 	.word	0x40010800
 800088c:	40004400 	.word	0x40004400

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <NMI_Handler+0x4>

08000896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <MemManage_Handler+0x4>

080008a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <UsageFault_Handler+0x4>

080008ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 fa19 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <TIM2_IRQHandler+0x10>)
 80008e6:	f001 fe29 	bl	800253c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000208 	.word	0x20000208

080008f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <USART1_IRQHandler+0x10>)
 80008fa:	f002 fa77 	bl	8002dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000190 	.word	0x20000190

08000908 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <USART2_IRQHandler+0x10>)
 800090e:	f002 fa6d 	bl	8002dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000250 	.word	0x20000250

0800091c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	return 1;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <_kill>:

int _kill(int pid, int sig)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000934:	f002 fe82 	bl	800363c <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	2216      	movs	r2, #22
 800093c:	601a      	str	r2, [r3, #0]
	return -1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_exit>:

void _exit (int status)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000952:	f04f 31ff 	mov.w	r1, #4294967295
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff ffe7 	bl	800092a <_kill>
	while (1) {}		/* Make sure we hang here */
 800095c:	e7fe      	b.n	800095c <_exit+0x12>

0800095e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e00a      	b.n	8000986 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000970:	f3af 8000 	nop.w
 8000974:	4601      	mov	r1, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	60ba      	str	r2, [r7, #8]
 800097c:	b2ca      	uxtb	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	3301      	adds	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	dbf0      	blt.n	8000970 <_read+0x12>
	}

return len;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e009      	b.n	80009be <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	60ba      	str	r2, [r7, #8]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbf1      	blt.n	80009aa <_write+0x12>
	}
	return len;
 80009c6:	687b      	ldr	r3, [r7, #4]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_close>:

int _close(int file)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	return -1;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	605a      	str	r2, [r3, #4]
	return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <_isatty>:

int _isatty(int file)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	return 1;
 8000a0c:	2301      	movs	r3, #1
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f002 fdec 	bl	800363c <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20002800 	.word	0x20002800
 8000a90:	00000400 	.word	0x00000400
 8000a94:	200000cc 	.word	0x200000cc
 8000a98:	200002a8 	.word	0x200002a8

08000a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <run_timer>:

void start_timer(int index) {
	timer_flag[index] = 1;
}

void run_timer(int index) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if (timer_counter[index] > 0) {
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <run_timer+0x48>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	dd13      	ble.n	8000ae4 <run_timer+0x3c>
		timer_counter[index]--;
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <run_timer+0x48>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	490a      	ldr	r1, [pc, #40]	; (8000af0 <run_timer+0x48>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (timer_counter[index] <= 0) {
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <run_timer+0x48>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	dc04      	bgt.n	8000ae4 <run_timer+0x3c>
			timer_flag[index] = 1;
 8000ada:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <run_timer+0x4c>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2101      	movs	r1, #1
 8000ae0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200000d0 	.word	0x200000d0
 8000af4:	200000dc 	.word	0x200000dc

08000af8 <init_timer>:

void init_timer(int index, int duration, int time_period_ms) {
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	timer_counter[index] = duration/time_period_ms;
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b0c:	4906      	ldr	r1, [pc, #24]	; (8000b28 <init_timer+0x30>)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <init_timer+0x34>)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2100      	movs	r1, #0
 8000b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 }
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	200000d0 	.word	0x200000d0
 8000b2c:	200000dc 	.word	0x200000dc

08000b30 <get_timer_flag>:
void stop_timer(int index) {
	timer_flag[index] = 0;
	timer_counter[index] = 0;
}

int get_timer_flag(int index) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if (index >= NUM_OF_TIMER) return 0xffffffff;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	dd02      	ble.n	8000b44 <get_timer_flag+0x14>
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e003      	b.n	8000b4c <get_timer_flag+0x1c>
	return timer_flag[index];
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <get_timer_flag+0x28>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200000dc 	.word	0x200000dc

08000b5c <uart_comm>:

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart1;
static char received_command[50];
static char command[50];
void uart_comm() {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	switch(uart_State) {
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <uart_comm+0xb4>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d04b      	beq.n	8000c00 <uart_comm+0xa4>
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	dc4f      	bgt.n	8000c0c <uart_comm+0xb0>
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <uart_comm+0x1a>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d01f      	beq.n	8000bb4 <uart_comm+0x58>
//		char yo[] = "NULL";
//		HAL_UART_Transmit(&huart1, (uint8_t*)yo, sizeof(yo), 1000);
//	} else {
//		HAL_UART_Transmit(&huart1, (uint8_t*)tok, sizeof(tok), 1000);
//	}
}
 8000b74:	e04a      	b.n	8000c0c <uart_comm+0xb0>
		strcpy(command, get_command());
 8000b76:	f7ff fb55 	bl	8000224 <get_command>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4825      	ldr	r0, [pc, #148]	; (8000c14 <uart_comm+0xb8>)
 8000b80:	f002 fdae 	bl	80036e0 <strcpy>
		tok = strtok(command, ":");
 8000b84:	4924      	ldr	r1, [pc, #144]	; (8000c18 <uart_comm+0xbc>)
 8000b86:	4823      	ldr	r0, [pc, #140]	; (8000c14 <uart_comm+0xb8>)
 8000b88:	f002 fdb2 	bl	80036f0 <strtok>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <uart_comm+0xc0>)
 8000b90:	6013      	str	r3, [r2, #0]
		if (strcmp(tok, "LED") == 0) {
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <uart_comm+0xc0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4922      	ldr	r1, [pc, #136]	; (8000c20 <uart_comm+0xc4>)
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fad7 	bl	800014c <strcmp>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d103      	bne.n	8000bac <uart_comm+0x50>
			uart_State = LED;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <uart_comm+0xb4>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
	break;
 8000baa:	e02f      	b.n	8000c0c <uart_comm+0xb0>
			uart_State = END;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <uart_comm+0xb4>)
 8000bae:	2202      	movs	r2, #2
 8000bb0:	701a      	strb	r2, [r3, #0]
	break;
 8000bb2:	e02b      	b.n	8000c0c <uart_comm+0xb0>
		tok = strtok(NULL, ":");
 8000bb4:	4918      	ldr	r1, [pc, #96]	; (8000c18 <uart_comm+0xbc>)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f002 fd9a 	bl	80036f0 <strtok>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <uart_comm+0xc0>)
 8000bc0:	6013      	str	r3, [r2, #0]
		if (strcmp(tok, "ON") == 0) {
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <uart_comm+0xc0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4917      	ldr	r1, [pc, #92]	; (8000c24 <uart_comm+0xc8>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fabf 	bl	800014c <strcmp>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10c      	bne.n	8000bee <uart_comm+0x92>
			HAL_UART_Transmit(&huart1, "I was here!", 12, 1200);
 8000bd4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000bd8:	220c      	movs	r2, #12
 8000bda:	4913      	ldr	r1, [pc, #76]	; (8000c28 <uart_comm+0xcc>)
 8000bdc:	4813      	ldr	r0, [pc, #76]	; (8000c2c <uart_comm+0xd0>)
 8000bde:	f002 f842 	bl	8002c66 <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	4812      	ldr	r0, [pc, #72]	; (8000c30 <uart_comm+0xd4>)
 8000be8:	f000 ff0a 	bl	8001a00 <HAL_GPIO_WritePin>
 8000bec:	e004      	b.n	8000bf8 <uart_comm+0x9c>
			HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	480f      	ldr	r0, [pc, #60]	; (8000c30 <uart_comm+0xd4>)
 8000bf4:	f000 ff04 	bl	8001a00 <HAL_GPIO_WritePin>
		uart_State = END;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <uart_comm+0xb4>)
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	701a      	strb	r2, [r3, #0]
	break;
 8000bfe:	e005      	b.n	8000c0c <uart_comm+0xb0>
		reset_command();
 8000c00:	f7ff fb04 	bl	800020c <reset_command>
		uart_State = IDLE;
 8000c04:	4b02      	ldr	r3, [pc, #8]	; (8000c10 <uart_comm+0xb4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]
	break;
 8000c0a:	bf00      	nop
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000e8 	.word	0x200000e8
 8000c14:	200000f0 	.word	0x200000f0
 8000c18:	08004ac4 	.word	0x08004ac4
 8000c1c:	200000ec 	.word	0x200000ec
 8000c20:	08004ac8 	.word	0x08004ac8
 8000c24:	08004acc 	.word	0x08004acc
 8000c28:	08004ad0 	.word	0x08004ad0
 8000c2c:	20000190 	.word	0x20000190
 8000c30:	40010800 	.word	0x40010800

08000c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c5a:	f7ff ff1f 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 fcf3 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c62:	f7ff fb0f 	bl	8000284 <main>
  bx lr
 8000c66:	4770      	bx	lr
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c70:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 8000c74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c78:	200002a8 	.word	0x200002a8

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x28>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x28>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 fc49 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f000 f808 	bl	8000cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fcd2 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x54>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x58>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 fc61 	bl	8001592 <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00e      	b.n	8000cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d80a      	bhi.n	8000cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 fc29 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <HAL_InitTick+0x5c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x1c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_IncTick+0x20>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <HAL_IncTick+0x20>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000294 	.word	0x20000294

08000d30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <HAL_GetTick+0x10>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	20000294 	.word	0x20000294

08000d44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0be      	b.n	8000ee4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d109      	bne.n	8000d88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fc90 	bl	80006a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 fabf 	bl	800130c <ADC_ConversionStop_Disable>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8099 	bne.w	8000ed2 <HAL_ADC_Init+0x18e>
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8095 	bne.w	8000ed2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000db0:	f023 0302 	bic.w	r3, r3, #2
 8000db4:	f043 0202 	orr.w	r2, r3, #2
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	7b1b      	ldrb	r3, [r3, #12]
 8000dca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ddc:	d003      	beq.n	8000de6 <HAL_ADC_Init+0xa2>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d102      	bne.n	8000dec <HAL_ADC_Init+0xa8>
 8000de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dea:	e000      	b.n	8000dee <HAL_ADC_Init+0xaa>
 8000dec:	2300      	movs	r3, #0
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7d1b      	ldrb	r3, [r3, #20]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d119      	bne.n	8000e30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7b1b      	ldrb	r3, [r3, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d109      	bne.n	8000e18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	035a      	lsls	r2, r3, #13
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	e00b      	b.n	8000e30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f043 0220 	orr.w	r2, r3, #32
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	f043 0201 	orr.w	r2, r3, #1
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_ADC_Init+0x1a8>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e60:	d003      	beq.n	8000e6a <HAL_ADC_Init+0x126>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d104      	bne.n	8000e74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	051b      	lsls	r3, r3, #20
 8000e72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	430a      	orrs	r2, r1
 8000e86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_ADC_Init+0x1ac>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d10b      	bne.n	8000eb0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea2:	f023 0303 	bic.w	r3, r3, #3
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000eae:	e018      	b.n	8000ee2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	f023 0312 	bic.w	r3, r3, #18
 8000eb8:	f043 0210 	orr.w	r2, r3, #16
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	f043 0201 	orr.w	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ed0:	e007      	b.n	8000ee2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	f043 0210 	orr.w	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	ffe1f7fd 	.word	0xffe1f7fd
 8000ef0:	ff1f0efe 	.word	0xff1f0efe

08000ef4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d101      	bne.n	8000f0e <HAL_ADC_Start+0x1a>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e098      	b.n	8001040 <HAL_ADC_Start+0x14c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f99e 	bl	8001258 <ADC_Enable>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f040 8087 	bne.w	8001036 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a41      	ldr	r2, [pc, #260]	; (8001048 <HAL_ADC_Start+0x154>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d105      	bne.n	8000f52 <HAL_ADC_Start+0x5e>
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <HAL_ADC_Start+0x158>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d115      	bne.n	8000f7e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d026      	beq.n	8000fba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f7c:	e01d      	b.n	8000fba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	; (800104c <HAL_ADC_Start+0x158>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d004      	beq.n	8000f9e <HAL_ADC_Start+0xaa>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a2b      	ldr	r2, [pc, #172]	; (8001048 <HAL_ADC_Start+0x154>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10d      	bne.n	8000fba <HAL_ADC_Start+0xc6>
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_ADC_Start+0x158>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d007      	beq.n	8000fba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fca:	f023 0206 	bic.w	r2, r3, #6
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fd2:	e002      	b.n	8000fda <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f06f 0202 	mvn.w	r2, #2
 8000fea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ff6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ffa:	d113      	bne.n	8001024 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_ADC_Start+0x154>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d105      	bne.n	8001012 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_ADC_Start+0x158>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	e00c      	b.n	800103e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e003      	b.n	800103e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40012800 	.word	0x40012800
 800104c:	40012400 	.word	0x40012400

08001050 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x20>
 8001084:	2302      	movs	r3, #2
 8001086:	e0dc      	b.n	8001242 <HAL_ADC_ConfigChannel+0x1da>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b06      	cmp	r3, #6
 8001096:	d81c      	bhi.n	80010d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b05      	subs	r3, #5
 80010aa:	221f      	movs	r2, #31
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4019      	ands	r1, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	3b05      	subs	r3, #5
 80010c4:	fa00 f203 	lsl.w	r2, r0, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
 80010d0:	e03c      	b.n	800114c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b0c      	cmp	r3, #12
 80010d8:	d81c      	bhi.n	8001114 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b23      	subs	r3, #35	; 0x23
 80010ec:	221f      	movs	r2, #31
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	4019      	ands	r1, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	3b23      	subs	r3, #35	; 0x23
 8001106:	fa00 f203 	lsl.w	r2, r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
 8001112:	e01b      	b.n	800114c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b41      	subs	r3, #65	; 0x41
 8001126:	221f      	movs	r2, #31
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	4019      	ands	r1, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	3b41      	subs	r3, #65	; 0x41
 8001140:	fa00 f203 	lsl.w	r2, r0, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b09      	cmp	r3, #9
 8001152:	d91c      	bls.n	800118e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68d9      	ldr	r1, [r3, #12]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	3b1e      	subs	r3, #30
 8001166:	2207      	movs	r2, #7
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	4019      	ands	r1, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	6898      	ldr	r0, [r3, #8]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	3b1e      	subs	r3, #30
 8001180:	fa00 f203 	lsl.w	r2, r0, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]
 800118c:	e019      	b.n	80011c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6919      	ldr	r1, [r3, #16]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	2207      	movs	r2, #7
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4019      	ands	r1, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	6898      	ldr	r0, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4613      	mov	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4413      	add	r3, r2
 80011b6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d003      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ce:	2b11      	cmp	r3, #17
 80011d0:	d132      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_ADC_ConfigChannel+0x1e4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d125      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d126      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d11a      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_ADC_ConfigChannel+0x1e8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a13      	ldr	r2, [pc, #76]	; (8001254 <HAL_ADC_ConfigChannel+0x1ec>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	0c9a      	lsrs	r2, r3, #18
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001218:	e002      	b.n	8001220 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3b01      	subs	r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f9      	bne.n	800121a <HAL_ADC_ConfigChannel+0x1b2>
 8001226:	e007      	b.n	8001238 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f043 0220 	orr.w	r2, r3, #32
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40012400 	.word	0x40012400
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d040      	beq.n	80012f8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0201 	orr.w	r2, r2, #1
 8001284:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <ADC_Enable+0xac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <ADC_Enable+0xb0>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	0c9b      	lsrs	r3, r3, #18
 8001292:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001294:	e002      	b.n	800129c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3b01      	subs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f9      	bne.n	8001296 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012a2:	f7ff fd45 	bl	8000d30 <HAL_GetTick>
 80012a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012a8:	e01f      	b.n	80012ea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012aa:	f7ff fd41 	bl	8000d30 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d918      	bls.n	80012ea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d011      	beq.n	80012ea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	f043 0210 	orr.w	r2, r3, #16
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e007      	b.n	80012fa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d1d8      	bne.n	80012aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000000 	.word	0x20000000
 8001308:	431bde83 	.word	0x431bde83

0800130c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d12e      	bne.n	8001384 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001336:	f7ff fcfb 	bl	8000d30 <HAL_GetTick>
 800133a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800133c:	e01b      	b.n	8001376 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800133e:	f7ff fcf7 	bl	8000d30 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d914      	bls.n	8001376 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10d      	bne.n	8001376 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	f043 0210 	orr.w	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e007      	b.n	8001386 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	d0dc      	beq.n	800133e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	60d3      	str	r3, [r2, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4906      	ldr	r1, [pc, #24]	; (8001428 <__NVIC_EnableIRQ+0x34>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	; (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f7ff ff90 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff2d 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff42 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff90 	bl	8001480 <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5f 	bl	800142c <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff35 	bl	80013f4 <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa2 	bl	80014e4 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d008      	beq.n	80015d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2204      	movs	r2, #4
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e020      	b.n	8001614 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 020e 	bic.w	r2, r2, #14
 80015e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	2101      	movs	r1, #1
 80015fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001600:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
	...

08001620 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001632:	2b02      	cmp	r3, #2
 8001634:	d005      	beq.n	8001642 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2204      	movs	r2, #4
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e051      	b.n	80016e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 020e 	bic.w	r2, r2, #14
 8001650:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_DMA_Abort_IT+0xd0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d029      	beq.n	80016c0 <HAL_DMA_Abort_IT+0xa0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <HAL_DMA_Abort_IT+0xd4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d022      	beq.n	80016bc <HAL_DMA_Abort_IT+0x9c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <HAL_DMA_Abort_IT+0xd8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d01a      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x96>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_DMA_Abort_IT+0xdc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d012      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x90>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <HAL_DMA_Abort_IT+0xe0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00a      	beq.n	80016aa <HAL_DMA_Abort_IT+0x8a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <HAL_DMA_Abort_IT+0xe4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d102      	bne.n	80016a4 <HAL_DMA_Abort_IT+0x84>
 800169e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016a2:	e00e      	b.n	80016c2 <HAL_DMA_Abort_IT+0xa2>
 80016a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a8:	e00b      	b.n	80016c2 <HAL_DMA_Abort_IT+0xa2>
 80016aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ae:	e008      	b.n	80016c2 <HAL_DMA_Abort_IT+0xa2>
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	e005      	b.n	80016c2 <HAL_DMA_Abort_IT+0xa2>
 80016b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ba:	e002      	b.n	80016c2 <HAL_DMA_Abort_IT+0xa2>
 80016bc:	2310      	movs	r3, #16
 80016be:	e000      	b.n	80016c2 <HAL_DMA_Abort_IT+0xa2>
 80016c0:	2301      	movs	r3, #1
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_DMA_Abort_IT+0xe8>)
 80016c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
    } 
  }
  return status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020008 	.word	0x40020008
 80016f4:	4002001c 	.word	0x4002001c
 80016f8:	40020030 	.word	0x40020030
 80016fc:	40020044 	.word	0x40020044
 8001700:	40020058 	.word	0x40020058
 8001704:	4002006c 	.word	0x4002006c
 8001708:	40020000 	.word	0x40020000

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b08b      	sub	sp, #44	; 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e148      	b.n	80019b2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001720:	2201      	movs	r2, #1
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8137 	bne.w	80019ac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4aa3      	ldr	r2, [pc, #652]	; (80019d0 <HAL_GPIO_Init+0x2c4>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d05e      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001748:	4aa1      	ldr	r2, [pc, #644]	; (80019d0 <HAL_GPIO_Init+0x2c4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d875      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800174e:	4aa1      	ldr	r2, [pc, #644]	; (80019d4 <HAL_GPIO_Init+0x2c8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d058      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001754:	4a9f      	ldr	r2, [pc, #636]	; (80019d4 <HAL_GPIO_Init+0x2c8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d86f      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800175a:	4a9f      	ldr	r2, [pc, #636]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d052      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001760:	4a9d      	ldr	r2, [pc, #628]	; (80019d8 <HAL_GPIO_Init+0x2cc>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d869      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001766:	4a9d      	ldr	r2, [pc, #628]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d04c      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 800176c:	4a9b      	ldr	r2, [pc, #620]	; (80019dc <HAL_GPIO_Init+0x2d0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d863      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001772:	4a9b      	ldr	r2, [pc, #620]	; (80019e0 <HAL_GPIO_Init+0x2d4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d046      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
 8001778:	4a99      	ldr	r2, [pc, #612]	; (80019e0 <HAL_GPIO_Init+0x2d4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d85d      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d82a      	bhi.n	80017d8 <HAL_GPIO_Init+0xcc>
 8001782:	2b12      	cmp	r3, #18
 8001784:	d859      	bhi.n	800183a <HAL_GPIO_Init+0x12e>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_GPIO_Init+0x80>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	08001807 	.word	0x08001807
 8001790:	080017e1 	.word	0x080017e1
 8001794:	080017f3 	.word	0x080017f3
 8001798:	08001835 	.word	0x08001835
 800179c:	0800183b 	.word	0x0800183b
 80017a0:	0800183b 	.word	0x0800183b
 80017a4:	0800183b 	.word	0x0800183b
 80017a8:	0800183b 	.word	0x0800183b
 80017ac:	0800183b 	.word	0x0800183b
 80017b0:	0800183b 	.word	0x0800183b
 80017b4:	0800183b 	.word	0x0800183b
 80017b8:	0800183b 	.word	0x0800183b
 80017bc:	0800183b 	.word	0x0800183b
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	0800183b 	.word	0x0800183b
 80017c8:	0800183b 	.word	0x0800183b
 80017cc:	0800183b 	.word	0x0800183b
 80017d0:	080017e9 	.word	0x080017e9
 80017d4:	080017fd 	.word	0x080017fd
 80017d8:	4a82      	ldr	r2, [pc, #520]	; (80019e4 <HAL_GPIO_Init+0x2d8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d013      	beq.n	8001806 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017de:	e02c      	b.n	800183a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e029      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	3304      	adds	r3, #4
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e024      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	3308      	adds	r3, #8
 80017f8:	623b      	str	r3, [r7, #32]
          break;
 80017fa:	e01f      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	330c      	adds	r3, #12
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e01a      	b.n	800183c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180e:	2304      	movs	r3, #4
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e013      	b.n	800183c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800181c:	2308      	movs	r3, #8
 800181e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	611a      	str	r2, [r3, #16]
          break;
 8001826:	e009      	b.n	800183c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001828:	2308      	movs	r3, #8
 800182a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	615a      	str	r2, [r3, #20]
          break;
 8001832:	e003      	b.n	800183c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e000      	b.n	800183c <HAL_GPIO_Init+0x130>
          break;
 800183a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2bff      	cmp	r3, #255	; 0xff
 8001840:	d801      	bhi.n	8001846 <HAL_GPIO_Init+0x13a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	e001      	b.n	800184a <HAL_GPIO_Init+0x13e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3304      	adds	r3, #4
 800184a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d802      	bhi.n	8001858 <HAL_GPIO_Init+0x14c>
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x152>
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	3b08      	subs	r3, #8
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	210f      	movs	r1, #15
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	401a      	ands	r2, r3
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8090 	beq.w	80019ac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800188c:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x2dc>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a4:	4a51      	ldr	r2, [pc, #324]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a49      	ldr	r2, [pc, #292]	; (80019f0 <HAL_GPIO_Init+0x2e4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1e0>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a48      	ldr	r2, [pc, #288]	; (80019f4 <HAL_GPIO_Init+0x2e8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1dc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <HAL_GPIO_Init+0x2ec>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1d8>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_Init+0x1e2>
 80018ec:	2300      	movs	r3, #0
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018fe:	493b      	ldr	r1, [pc, #236]	; (80019ec <HAL_GPIO_Init+0x2e0>)
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4937      	ldr	r1, [pc, #220]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	4933      	ldr	r1, [pc, #204]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001930:	4013      	ands	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	492d      	ldr	r1, [pc, #180]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	4929      	ldr	r1, [pc, #164]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001958:	4013      	ands	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4923      	ldr	r1, [pc, #140]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	491f      	ldr	r1, [pc, #124]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001980:	4013      	ands	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4919      	ldr	r1, [pc, #100]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	4915      	ldr	r1, [pc, #84]	; (80019fc <HAL_GPIO_Init+0x2f0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	3301      	adds	r3, #1
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	fa22 f303 	lsr.w	r3, r2, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f47f aeaf 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	372c      	adds	r7, #44	; 0x2c
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	10320000 	.word	0x10320000
 80019d4:	10310000 	.word	0x10310000
 80019d8:	10220000 	.word	0x10220000
 80019dc:	10210000 	.word	0x10210000
 80019e0:	10120000 	.word	0x10120000
 80019e4:	10110000 	.word	0x10110000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	40010800 	.word	0x40010800
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40011000 	.word	0x40011000
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a1c:	e003      	b.n	8001a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	611a      	str	r2, [r3, #16]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43d9      	mvns	r1, r3
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	400b      	ands	r3, r1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e26c      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e246      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff f8f6 	bl	8000d30 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff f8f2 	bl	8000d30 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1fa      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff f8e2 	bl	8000d30 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff f8de 	bl	8000d30 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1e6      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1ba      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f897 	bl	8000d30 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff f893 	bl	8000d30 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e19b      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f876 	bl	8000d30 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f872 	bl	8000d30 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e17a      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff f856 	bl	8000d30 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff f852 	bl	8000d30 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e15a      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 fad8 	bl	800225c <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff f83c 	bl	8000d30 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f838 	bl	8000d30 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e140      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b9e      	ldr	r3, [pc, #632]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b97      	ldr	r3, [pc, #604]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b94      	ldr	r3, [pc, #592]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a93      	ldr	r2, [pc, #588]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b91      	ldr	r3, [pc, #580]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a8a      	ldr	r2, [pc, #552]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fff9 	bl	8000d30 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7fe fff5 	bl	8000d30 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0fd      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a75      	ldr	r2, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a6c      	ldr	r2, [pc, #432]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a63      	ldr	r2, [pc, #396]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe ffa9 	bl	8000d30 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe ffa5 	bl	8000d30 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0ab      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe ff93 	bl	8000d30 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe ff8f 	bl	8000d30 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e095      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b48      	ldr	r3, [pc, #288]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8081 	beq.w	8001f4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe ff63 	bl	8000d30 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe ff5f 	bl	8000d30 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e067      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	492d      	ldr	r1, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	4927      	ldr	r1, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe ff33 	bl	8000d30 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe ff2f 	bl	8000d30 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e037      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e02f      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ff1c 	bl	8000d30 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe ff18 	bl	8000d30 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e020      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e018      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e013      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	42420060 	.word	0x42420060

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7fe fe6c 	bl	8000d30 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7fe fe68 	bl	8000d30 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1cc>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fdca 	bl	8000cac <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	08004aec 	.word	0x08004aec
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b490      	push	{r4, r7}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002140:	1d3c      	adds	r4, r7, #4
 8002142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002148:	f240 2301 	movw	r3, #513	; 0x201
 800214c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x46>
 8002176:	e02d      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e02d      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800218a:	4413      	add	r3, r2
 800218c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002190:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c5b      	lsrs	r3, r3, #17
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021aa:	4413      	add	r3, r2
 80021ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b6:	fb02 f203 	mul.w	r2, r2, r3
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e004      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	623b      	str	r3, [r7, #32]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	6a3b      	ldr	r3, [r7, #32]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc90      	pop	{r4, r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	08004adc 	.word	0x08004adc
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	003d0900 	.word	0x003d0900

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_RCC_GetHCLKFreq+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	20000000 	.word	0x20000000

0800220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002210:	f7ff fff2 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08004afc 	.word	0x08004afc

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002238:	f7ff ffde 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	0adb      	lsrs	r3, r3, #11
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4903      	ldr	r1, [pc, #12]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08004afc 	.word	0x08004afc

0800225c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <RCC_Delay+0x34>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <RCC_Delay+0x38>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0a5b      	lsrs	r3, r3, #9
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002278:	bf00      	nop
  }
  while (Delay --);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1e5a      	subs	r2, r3, #1
 800227e:	60fa      	str	r2, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f9      	bne.n	8002278 <RCC_Delay+0x1c>
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000000 	.word	0x20000000
 8002294:	10624dd3 	.word	0x10624dd3

08002298 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d07d      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b8:	4b4f      	ldr	r3, [pc, #316]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10d      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c4:	4b4c      	ldr	r3, [pc, #304]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ce:	61d3      	str	r3, [r2, #28]
 80022d0:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d118      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f8:	f7fe fd1a 	bl	8000d30 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	e008      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fd16 	bl	8000d30 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e06d      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800231e:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002326:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d02e      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d027      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002346:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800234c:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002352:	4a29      	ldr	r2, [pc, #164]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d014      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe fce5 	bl	8000d30 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fce1 	bl	8000d30 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e036      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ee      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4917      	ldr	r1, [pc, #92]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	4313      	orrs	r3, r2
 800239c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	490b      	ldr	r1, [pc, #44]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4904      	ldr	r1, [pc, #16]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
 8002400:	42420440 	.word	0x42420440

08002404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e041      	b.n	800249a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe f978 	bl	8000720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 fa6a 	bl	800291c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e035      	b.n	8002528 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_TIM_Base_Start_IT+0x90>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d009      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d004      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x4e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a12      	ldr	r2, [pc, #72]	; (8002538 <HAL_TIM_Base_Start_IT+0x94>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d111      	bne.n	8002516 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d010      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002514:	e007      	b.n	8002526 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f042 0201 	orr.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400

0800253c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b02      	cmp	r3, #2
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0202 	mvn.w	r2, #2
 8002568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9b1 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f9a4 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f9b3 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0204 	mvn.w	r2, #4
 80025bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f987 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f97a 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f989 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b08      	cmp	r3, #8
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0208 	mvn.w	r2, #8
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2204      	movs	r2, #4
 8002616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f95d 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f950 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f95f 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b10      	cmp	r3, #16
 800264c:	d122      	bne.n	8002694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b10      	cmp	r3, #16
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0210 	mvn.w	r2, #16
 8002664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2208      	movs	r2, #8
 800266a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f933 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f926 	bl	80028d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f935 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d10e      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0201 	mvn.w	r2, #1
 80026b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fd ffac 	bl	8000618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	2b80      	cmp	r3, #128	; 0x80
 80026cc:	d10e      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d107      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa67 	bl	8002bba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	d10e      	bne.n	8002718 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d107      	bne.n	8002718 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8f9 	bl	800290a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b20      	cmp	r3, #32
 8002724:	d10e      	bne.n	8002744 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b20      	cmp	r3, #32
 8002732:	d107      	bne.n	8002744 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0220 	mvn.w	r2, #32
 800273c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa32 	bl	8002ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_TIM_ConfigClockSource+0x18>
 8002760:	2302      	movs	r3, #2
 8002762:	e0b3      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x180>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800278a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279c:	d03e      	beq.n	800281c <HAL_TIM_ConfigClockSource+0xd0>
 800279e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a2:	f200 8087 	bhi.w	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	f000 8085 	beq.w	80028b8 <HAL_TIM_ConfigClockSource+0x16c>
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b2:	d87f      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d01a      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0xa2>
 80027b8:	2b70      	cmp	r3, #112	; 0x70
 80027ba:	d87b      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d050      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0x116>
 80027c0:	2b60      	cmp	r3, #96	; 0x60
 80027c2:	d877      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d03c      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0xf6>
 80027c8:	2b50      	cmp	r3, #80	; 0x50
 80027ca:	d873      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d058      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x136>
 80027d0:	2b40      	cmp	r3, #64	; 0x40
 80027d2:	d86f      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d064      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x156>
 80027d8:	2b30      	cmp	r3, #48	; 0x30
 80027da:	d86b      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d060      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x156>
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d867      	bhi.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d05c      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x156>
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d05a      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027ec:	e062      	b.n	80028b4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f000 f95c 	bl	8002aba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002810:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	609a      	str	r2, [r3, #8]
      break;
 800281a:	e04e      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f000 f945 	bl	8002aba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283e:	609a      	str	r2, [r3, #8]
      break;
 8002840:	e03b      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	461a      	mov	r2, r3
 8002850:	f000 f8bc 	bl	80029cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2150      	movs	r1, #80	; 0x50
 800285a:	4618      	mov	r0, r3
 800285c:	f000 f913 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002860:	e02b      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	461a      	mov	r2, r3
 8002870:	f000 f8da 	bl	8002a28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2160      	movs	r1, #96	; 0x60
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f903 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 8002880:	e01b      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	461a      	mov	r2, r3
 8002890:	f000 f89c 	bl	80029cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f8f3 	bl	8002a86 <TIM_ITRx_SetConfig>
      break;
 80028a0:	e00b      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4619      	mov	r1, r3
 80028ac:	4610      	mov	r0, r2
 80028ae:	f000 f8ea 	bl	8002a86 <TIM_ITRx_SetConfig>
        break;
 80028b2:	e002      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b4:	bf00      	nop
 80028b6:	e000      	b.n	80028ba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <TIM_Base_SetConfig+0xa8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <TIM_Base_SetConfig+0x28>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d003      	beq.n	8002944 <TIM_Base_SetConfig+0x28>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <TIM_Base_SetConfig+0xac>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <TIM_Base_SetConfig+0xa8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x52>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x52>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <TIM_Base_SetConfig+0xac>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <TIM_Base_SetConfig+0xa8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400

080029cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f023 0201 	bic.w	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f023 030a 	bic.w	r3, r3, #10
 8002a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f023 0210 	bic.w	r2, r3, #16
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	031b      	lsls	r3, r3, #12
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	621a      	str	r2, [r3, #32]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f043 0307 	orr.w	r3, r3, #7
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	609a      	str	r2, [r3, #8]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b087      	sub	sp, #28
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	021a      	lsls	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e041      	b.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d004      	beq.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a10      	ldr	r2, [pc, #64]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10c      	bne.n	8002b82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40012c00 	.word	0x40012c00
 8002ba4:	40000400 	.word	0x40000400

08002ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e03f      	b.n	8002c5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd fdb8 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fc85 	bl	8003520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b08a      	sub	sp, #40	; 0x28
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d17c      	bne.n	8002d80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_UART_Transmit+0x2c>
 8002c8c:	88fb      	ldrh	r3, [r7, #6]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e075      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Transmit+0x3e>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e06e      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2221      	movs	r2, #33	; 0x21
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cba:	f7fe f839 	bl	8000d30 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd4:	d108      	bne.n	8002ce8 <HAL_UART_Transmit+0x82>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e003      	b.n	8002cf0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cf8:	e02a      	b.n	8002d50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fa38 	bl	800317a <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e036      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e007      	b.n	8002d42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1cf      	bne.n	8002cfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	; 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fa08 	bl	800317a <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	4613      	mov	r3, r2
 8002d96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d11d      	bne.n	8002de0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <HAL_UART_Receive_IT+0x26>
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e016      	b.n	8002de2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Receive_IT+0x38>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e00f      	b.n	8002de2 <HAL_UART_Receive_IT+0x58>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68b9      	ldr	r1, [r7, #8]
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa19 	bl	800320e <UART_Start_Receive_IT>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	e000      	b.n	8002de2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_UART_IRQHandler+0x52>
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fac9 	bl	80033ce <UART_Receive_IT>
      return;
 8002e3c:	e17b      	b.n	8003136 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80b1 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x1bc>
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_UART_IRQHandler+0x70>
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80a6 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_UART_IRQHandler+0x90>
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0201 	orr.w	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_UART_IRQHandler+0xb0>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f043 0202 	orr.w	r2, r3, #2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_UART_IRQHandler+0xd0>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00f      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xfa>
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_UART_IRQHandler+0xee>
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f043 0208 	orr.w	r2, r3, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 811e 	beq.w	800312c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_UART_IRQHandler+0x11e>
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fa62 	bl	80033ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <HAL_UART_IRQHandler+0x146>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d031      	beq.n	8002f96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f9a4 	bl	8003280 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d023      	beq.n	8002f8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d013      	beq.n	8002f86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	4a76      	ldr	r2, [pc, #472]	; (800313c <HAL_UART_IRQHandler+0x350>)
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fb58 	bl	8001620 <HAL_DMA_Abort_IT>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f80:	4610      	mov	r0, r2
 8002f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f84:	e00e      	b.n	8002fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8e3 	bl	8003152 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	e00a      	b.n	8002fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8df 	bl	8003152 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f94:	e006      	b.n	8002fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f8db 	bl	8003152 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fa2:	e0c3      	b.n	800312c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	bf00      	nop
    return;
 8002fa6:	e0c1      	b.n	800312c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	f040 80a1 	bne.w	80030f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 809b 	beq.w	80030f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8095 	beq.w	80030f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d04e      	beq.n	800308c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002ff8:	8a3b      	ldrh	r3, [r7, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8098 	beq.w	8003130 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003004:	8a3a      	ldrh	r2, [r7, #16]
 8003006:	429a      	cmp	r2, r3
 8003008:	f080 8092 	bcs.w	8003130 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8a3a      	ldrh	r2, [r7, #16]
 8003010:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b20      	cmp	r3, #32
 800301a:	d02b      	beq.n	8003074 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800302a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800304a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0210 	bic.w	r2, r2, #16
 8003068:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fa9b 	bl	80015aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800307c:	b29b      	uxth	r3, r3
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	b29b      	uxth	r3, r3
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f86d 	bl	8003164 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800308a:	e051      	b.n	8003130 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003094:	b29b      	uxth	r3, r3
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d047      	beq.n	8003134 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80030a4:	8a7b      	ldrh	r3, [r7, #18]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d044      	beq.n	8003134 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0210 	bic.w	r2, r2, #16
 80030e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030e8:	8a7b      	ldrh	r3, [r7, #18]
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f839 	bl	8003164 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030f2:	e01f      	b.n	8003134 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_UART_IRQHandler+0x324>
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8f9 	bl	8003300 <UART_Transmit_IT>
    return;
 800310e:	e012      	b.n	8003136 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00d      	beq.n	8003136 <HAL_UART_IRQHandler+0x34a>
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f93a 	bl	800339e <UART_EndTransmit_IT>
    return;
 800312a:	e004      	b.n	8003136 <HAL_UART_IRQHandler+0x34a>
    return;
 800312c:	bf00      	nop
 800312e:	e002      	b.n	8003136 <HAL_UART_IRQHandler+0x34a>
      return;
 8003130:	bf00      	nop
 8003132:	e000      	b.n	8003136 <HAL_UART_IRQHandler+0x34a>
      return;
 8003134:	bf00      	nop
  }
}
 8003136:	3728      	adds	r7, #40	; 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	080032d9 	.word	0x080032d9

08003140 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr

08003152 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4613      	mov	r3, r2
 8003188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318a:	e02c      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003192:	d028      	beq.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0x30>
 800319a:	f7fd fdc9 	bl	8000d30 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d21d      	bcs.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e00f      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d0c3      	beq.n	800318c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	4613      	mov	r3, r2
 800321a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	; 0x22
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003252:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0220 	orr.w	r2, r2, #32
 8003272:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003296:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0210 	bic.w	r2, r2, #16
 80032be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ff2d 	bl	8003152 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b21      	cmp	r3, #33	; 0x21
 8003312:	d13e      	bne.n	8003392 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d114      	bne.n	8003348 <UART_Transmit_IT+0x48>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d110      	bne.n	8003348 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	1c9a      	adds	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	621a      	str	r2, [r3, #32]
 8003346:	e008      	b.n	800335a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	1c59      	adds	r1, r3, #1
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6211      	str	r1, [r2, #32]
 8003352:	781a      	ldrb	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29b      	uxth	r3, r3
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4619      	mov	r1, r3
 8003368:	84d1      	strh	r1, [r2, #38]	; 0x26
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff febe 	bl	8003140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b22      	cmp	r3, #34	; 0x22
 80033e0:	f040 8099 	bne.w	8003516 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ec:	d117      	bne.n	800341e <UART_Receive_IT+0x50>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d113      	bne.n	800341e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340c:	b29a      	uxth	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	1c9a      	adds	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
 800341c:	e026      	b.n	800346c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003430:	d007      	beq.n	8003442 <UART_Receive_IT+0x74>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <UART_Receive_IT+0x82>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e008      	b.n	8003462 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345c:	b2da      	uxtb	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29b      	uxth	r3, r3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4619      	mov	r1, r3
 800347a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800347c:	2b00      	cmp	r3, #0
 800347e:	d148      	bne.n	8003512 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0220 	bic.w	r2, r2, #32
 800348e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800349e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d123      	bne.n	8003508 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0210 	bic.w	r2, r2, #16
 80034d4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d10a      	bne.n	80034fa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fe2f 	bl	8003164 <HAL_UARTEx_RxEventCallback>
 8003506:	e002      	b.n	800350e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fc fe95 	bl	8000238 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e002      	b.n	8003518 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003516:	2302      	movs	r3, #2
  }
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800355a:	f023 030c 	bic.w	r3, r3, #12
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	430b      	orrs	r3, r1
 8003566:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2c      	ldr	r2, [pc, #176]	; (8003634 <UART_SetConfig+0x114>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d103      	bne.n	8003590 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7fe fe54 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	e002      	b.n	8003596 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003590:	f7fe fe3c 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8003594:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009a      	lsls	r2, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <UART_SetConfig+0x118>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	0119      	lsls	r1, r3, #4
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <UART_SetConfig+0x118>)
 80035ce:	fba3 0302 	umull	r0, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2064      	movs	r0, #100	; 0x64
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	; 0x32
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <UART_SetConfig+0x118>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ec:	4419      	add	r1, r3
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009a      	lsls	r2, r3, #2
 80035f8:	441a      	add	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	fbb2 f2f3 	udiv	r2, r2, r3
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <UART_SetConfig+0x118>)
 8003606:	fba3 0302 	umull	r0, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2064      	movs	r0, #100	; 0x64
 800360e:	fb00 f303 	mul.w	r3, r0, r3
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	3332      	adds	r3, #50	; 0x32
 8003618:	4a07      	ldr	r2, [pc, #28]	; (8003638 <UART_SetConfig+0x118>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	f003 020f 	and.w	r2, r3, #15
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	440a      	add	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40013800 	.word	0x40013800
 8003638:	51eb851f 	.word	0x51eb851f

0800363c <__errno>:
 800363c:	4b01      	ldr	r3, [pc, #4]	; (8003644 <__errno+0x8>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	2000000c 	.word	0x2000000c

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	2600      	movs	r6, #0
 800364c:	4d0c      	ldr	r5, [pc, #48]	; (8003680 <__libc_init_array+0x38>)
 800364e:	4c0d      	ldr	r4, [pc, #52]	; (8003684 <__libc_init_array+0x3c>)
 8003650:	1b64      	subs	r4, r4, r5
 8003652:	10a4      	asrs	r4, r4, #2
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	f001 fa24 	bl	8004aa4 <_init>
 800365c:	2600      	movs	r6, #0
 800365e:	4d0a      	ldr	r5, [pc, #40]	; (8003688 <__libc_init_array+0x40>)
 8003660:	4c0a      	ldr	r4, [pc, #40]	; (800368c <__libc_init_array+0x44>)
 8003662:	1b64      	subs	r4, r4, r5
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f855 3b04 	ldr.w	r3, [r5], #4
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	08004c50 	.word	0x08004c50
 8003684:	08004c50 	.word	0x08004c50
 8003688:	08004c50 	.word	0x08004c50
 800368c:	08004c54 	.word	0x08004c54

08003690 <memset>:
 8003690:	4603      	mov	r3, r0
 8003692:	4402      	add	r2, r0
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	f803 1b01 	strb.w	r1, [r3], #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <siprintf>:
 80036a0:	b40e      	push	{r1, r2, r3}
 80036a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036a6:	b500      	push	{lr}
 80036a8:	b09c      	sub	sp, #112	; 0x70
 80036aa:	ab1d      	add	r3, sp, #116	; 0x74
 80036ac:	9002      	str	r0, [sp, #8]
 80036ae:	9006      	str	r0, [sp, #24]
 80036b0:	9107      	str	r1, [sp, #28]
 80036b2:	9104      	str	r1, [sp, #16]
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <siprintf+0x38>)
 80036b6:	4909      	ldr	r1, [pc, #36]	; (80036dc <siprintf+0x3c>)
 80036b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80036bc:	9105      	str	r1, [sp, #20]
 80036be:	6800      	ldr	r0, [r0, #0]
 80036c0:	a902      	add	r1, sp, #8
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	f000 f9aa 	bl	8003a1c <_svfiprintf_r>
 80036c8:	2200      	movs	r2, #0
 80036ca:	9b02      	ldr	r3, [sp, #8]
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	b01c      	add	sp, #112	; 0x70
 80036d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80036d4:	b003      	add	sp, #12
 80036d6:	4770      	bx	lr
 80036d8:	2000000c 	.word	0x2000000c
 80036dc:	ffff0208 	.word	0xffff0208

080036e0 <strcpy>:
 80036e0:	4603      	mov	r3, r0
 80036e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036e6:	f803 2b01 	strb.w	r2, [r3], #1
 80036ea:	2a00      	cmp	r2, #0
 80036ec:	d1f9      	bne.n	80036e2 <strcpy+0x2>
 80036ee:	4770      	bx	lr

080036f0 <strtok>:
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <strtok+0x5c>)
 80036f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f6:	681f      	ldr	r7, [r3, #0]
 80036f8:	4605      	mov	r5, r0
 80036fa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80036fc:	460e      	mov	r6, r1
 80036fe:	b9ec      	cbnz	r4, 800373c <strtok+0x4c>
 8003700:	2050      	movs	r0, #80	; 0x50
 8003702:	f000 f881 	bl	8003808 <malloc>
 8003706:	4602      	mov	r2, r0
 8003708:	65b8      	str	r0, [r7, #88]	; 0x58
 800370a:	b920      	cbnz	r0, 8003716 <strtok+0x26>
 800370c:	2157      	movs	r1, #87	; 0x57
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <strtok+0x60>)
 8003710:	4810      	ldr	r0, [pc, #64]	; (8003754 <strtok+0x64>)
 8003712:	f000 f849 	bl	80037a8 <__assert_func>
 8003716:	e9c0 4400 	strd	r4, r4, [r0]
 800371a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800371e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003722:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003726:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800372a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800372e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003732:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003736:	6184      	str	r4, [r0, #24]
 8003738:	7704      	strb	r4, [r0, #28]
 800373a:	6244      	str	r4, [r0, #36]	; 0x24
 800373c:	4631      	mov	r1, r6
 800373e:	4628      	mov	r0, r5
 8003740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003742:	2301      	movs	r3, #1
 8003744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	f000 b806 	b.w	8003758 <__strtok_r>
 800374c:	2000000c 	.word	0x2000000c
 8003750:	08004b08 	.word	0x08004b08
 8003754:	08004b1f 	.word	0x08004b1f

08003758 <__strtok_r>:
 8003758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800375a:	b908      	cbnz	r0, 8003760 <__strtok_r+0x8>
 800375c:	6810      	ldr	r0, [r2, #0]
 800375e:	b188      	cbz	r0, 8003784 <__strtok_r+0x2c>
 8003760:	4604      	mov	r4, r0
 8003762:	460f      	mov	r7, r1
 8003764:	4620      	mov	r0, r4
 8003766:	f814 5b01 	ldrb.w	r5, [r4], #1
 800376a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800376e:	b91e      	cbnz	r6, 8003778 <__strtok_r+0x20>
 8003770:	b965      	cbnz	r5, 800378c <__strtok_r+0x34>
 8003772:	4628      	mov	r0, r5
 8003774:	6015      	str	r5, [r2, #0]
 8003776:	e005      	b.n	8003784 <__strtok_r+0x2c>
 8003778:	42b5      	cmp	r5, r6
 800377a:	d1f6      	bne.n	800376a <__strtok_r+0x12>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <__strtok_r+0xa>
 8003780:	6014      	str	r4, [r2, #0]
 8003782:	7003      	strb	r3, [r0, #0]
 8003784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003786:	461c      	mov	r4, r3
 8003788:	e00c      	b.n	80037a4 <__strtok_r+0x4c>
 800378a:	b915      	cbnz	r5, 8003792 <__strtok_r+0x3a>
 800378c:	460e      	mov	r6, r1
 800378e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003792:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003796:	42ab      	cmp	r3, r5
 8003798:	d1f7      	bne.n	800378a <__strtok_r+0x32>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f3      	beq.n	8003786 <__strtok_r+0x2e>
 800379e:	2300      	movs	r3, #0
 80037a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80037a4:	6014      	str	r4, [r2, #0]
 80037a6:	e7ed      	b.n	8003784 <__strtok_r+0x2c>

080037a8 <__assert_func>:
 80037a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037aa:	4614      	mov	r4, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <__assert_func+0x2c>)
 80037b0:	4605      	mov	r5, r0
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68d8      	ldr	r0, [r3, #12]
 80037b6:	b14c      	cbz	r4, 80037cc <__assert_func+0x24>
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <__assert_func+0x30>)
 80037ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80037be:	9100      	str	r1, [sp, #0]
 80037c0:	462b      	mov	r3, r5
 80037c2:	4906      	ldr	r1, [pc, #24]	; (80037dc <__assert_func+0x34>)
 80037c4:	f000 f80e 	bl	80037e4 <fiprintf>
 80037c8:	f000 fde6 	bl	8004398 <abort>
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <__assert_func+0x38>)
 80037ce:	461c      	mov	r4, r3
 80037d0:	e7f3      	b.n	80037ba <__assert_func+0x12>
 80037d2:	bf00      	nop
 80037d4:	2000000c 	.word	0x2000000c
 80037d8:	08004b80 	.word	0x08004b80
 80037dc:	08004b8d 	.word	0x08004b8d
 80037e0:	08004bbb 	.word	0x08004bbb

080037e4 <fiprintf>:
 80037e4:	b40e      	push	{r1, r2, r3}
 80037e6:	b503      	push	{r0, r1, lr}
 80037e8:	4601      	mov	r1, r0
 80037ea:	ab03      	add	r3, sp, #12
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <fiprintf+0x20>)
 80037ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80037f2:	6800      	ldr	r0, [r0, #0]
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	f000 fa39 	bl	8003c6c <_vfiprintf_r>
 80037fa:	b002      	add	sp, #8
 80037fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003800:	b003      	add	sp, #12
 8003802:	4770      	bx	lr
 8003804:	2000000c 	.word	0x2000000c

08003808 <malloc>:
 8003808:	4b02      	ldr	r3, [pc, #8]	; (8003814 <malloc+0xc>)
 800380a:	4601      	mov	r1, r0
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	f000 b84f 	b.w	80038b0 <_malloc_r>
 8003812:	bf00      	nop
 8003814:	2000000c 	.word	0x2000000c

08003818 <_free_r>:
 8003818:	b538      	push	{r3, r4, r5, lr}
 800381a:	4605      	mov	r5, r0
 800381c:	2900      	cmp	r1, #0
 800381e:	d043      	beq.n	80038a8 <_free_r+0x90>
 8003820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003824:	1f0c      	subs	r4, r1, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	bfb8      	it	lt
 800382a:	18e4      	addlt	r4, r4, r3
 800382c:	f001 f810 	bl	8004850 <__malloc_lock>
 8003830:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <_free_r+0x94>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	4610      	mov	r0, r2
 8003836:	b933      	cbnz	r3, 8003846 <_free_r+0x2e>
 8003838:	6063      	str	r3, [r4, #4]
 800383a:	6014      	str	r4, [r2, #0]
 800383c:	4628      	mov	r0, r5
 800383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003842:	f001 b80b 	b.w	800485c <__malloc_unlock>
 8003846:	42a3      	cmp	r3, r4
 8003848:	d90a      	bls.n	8003860 <_free_r+0x48>
 800384a:	6821      	ldr	r1, [r4, #0]
 800384c:	1862      	adds	r2, r4, r1
 800384e:	4293      	cmp	r3, r2
 8003850:	bf01      	itttt	eq
 8003852:	681a      	ldreq	r2, [r3, #0]
 8003854:	685b      	ldreq	r3, [r3, #4]
 8003856:	1852      	addeq	r2, r2, r1
 8003858:	6022      	streq	r2, [r4, #0]
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	6004      	str	r4, [r0, #0]
 800385e:	e7ed      	b.n	800383c <_free_r+0x24>
 8003860:	461a      	mov	r2, r3
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	b10b      	cbz	r3, 800386a <_free_r+0x52>
 8003866:	42a3      	cmp	r3, r4
 8003868:	d9fa      	bls.n	8003860 <_free_r+0x48>
 800386a:	6811      	ldr	r1, [r2, #0]
 800386c:	1850      	adds	r0, r2, r1
 800386e:	42a0      	cmp	r0, r4
 8003870:	d10b      	bne.n	800388a <_free_r+0x72>
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	4401      	add	r1, r0
 8003876:	1850      	adds	r0, r2, r1
 8003878:	4283      	cmp	r3, r0
 800387a:	6011      	str	r1, [r2, #0]
 800387c:	d1de      	bne.n	800383c <_free_r+0x24>
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4401      	add	r1, r0
 8003884:	6011      	str	r1, [r2, #0]
 8003886:	6053      	str	r3, [r2, #4]
 8003888:	e7d8      	b.n	800383c <_free_r+0x24>
 800388a:	d902      	bls.n	8003892 <_free_r+0x7a>
 800388c:	230c      	movs	r3, #12
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	e7d4      	b.n	800383c <_free_r+0x24>
 8003892:	6820      	ldr	r0, [r4, #0]
 8003894:	1821      	adds	r1, r4, r0
 8003896:	428b      	cmp	r3, r1
 8003898:	bf01      	itttt	eq
 800389a:	6819      	ldreq	r1, [r3, #0]
 800389c:	685b      	ldreq	r3, [r3, #4]
 800389e:	1809      	addeq	r1, r1, r0
 80038a0:	6021      	streq	r1, [r4, #0]
 80038a2:	6063      	str	r3, [r4, #4]
 80038a4:	6054      	str	r4, [r2, #4]
 80038a6:	e7c9      	b.n	800383c <_free_r+0x24>
 80038a8:	bd38      	pop	{r3, r4, r5, pc}
 80038aa:	bf00      	nop
 80038ac:	20000124 	.word	0x20000124

080038b0 <_malloc_r>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	1ccd      	adds	r5, r1, #3
 80038b4:	f025 0503 	bic.w	r5, r5, #3
 80038b8:	3508      	adds	r5, #8
 80038ba:	2d0c      	cmp	r5, #12
 80038bc:	bf38      	it	cc
 80038be:	250c      	movcc	r5, #12
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	4606      	mov	r6, r0
 80038c4:	db01      	blt.n	80038ca <_malloc_r+0x1a>
 80038c6:	42a9      	cmp	r1, r5
 80038c8:	d903      	bls.n	80038d2 <_malloc_r+0x22>
 80038ca:	230c      	movs	r3, #12
 80038cc:	6033      	str	r3, [r6, #0]
 80038ce:	2000      	movs	r0, #0
 80038d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d2:	f000 ffbd 	bl	8004850 <__malloc_lock>
 80038d6:	4921      	ldr	r1, [pc, #132]	; (800395c <_malloc_r+0xac>)
 80038d8:	680a      	ldr	r2, [r1, #0]
 80038da:	4614      	mov	r4, r2
 80038dc:	b99c      	cbnz	r4, 8003906 <_malloc_r+0x56>
 80038de:	4f20      	ldr	r7, [pc, #128]	; (8003960 <_malloc_r+0xb0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b923      	cbnz	r3, 80038ee <_malloc_r+0x3e>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4630      	mov	r0, r6
 80038e8:	f000 fc86 	bl	80041f8 <_sbrk_r>
 80038ec:	6038      	str	r0, [r7, #0]
 80038ee:	4629      	mov	r1, r5
 80038f0:	4630      	mov	r0, r6
 80038f2:	f000 fc81 	bl	80041f8 <_sbrk_r>
 80038f6:	1c43      	adds	r3, r0, #1
 80038f8:	d123      	bne.n	8003942 <_malloc_r+0x92>
 80038fa:	230c      	movs	r3, #12
 80038fc:	4630      	mov	r0, r6
 80038fe:	6033      	str	r3, [r6, #0]
 8003900:	f000 ffac 	bl	800485c <__malloc_unlock>
 8003904:	e7e3      	b.n	80038ce <_malloc_r+0x1e>
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	1b5b      	subs	r3, r3, r5
 800390a:	d417      	bmi.n	800393c <_malloc_r+0x8c>
 800390c:	2b0b      	cmp	r3, #11
 800390e:	d903      	bls.n	8003918 <_malloc_r+0x68>
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	441c      	add	r4, r3
 8003914:	6025      	str	r5, [r4, #0]
 8003916:	e004      	b.n	8003922 <_malloc_r+0x72>
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	42a2      	cmp	r2, r4
 800391c:	bf0c      	ite	eq
 800391e:	600b      	streq	r3, [r1, #0]
 8003920:	6053      	strne	r3, [r2, #4]
 8003922:	4630      	mov	r0, r6
 8003924:	f000 ff9a 	bl	800485c <__malloc_unlock>
 8003928:	f104 000b 	add.w	r0, r4, #11
 800392c:	1d23      	adds	r3, r4, #4
 800392e:	f020 0007 	bic.w	r0, r0, #7
 8003932:	1ac2      	subs	r2, r0, r3
 8003934:	d0cc      	beq.n	80038d0 <_malloc_r+0x20>
 8003936:	1a1b      	subs	r3, r3, r0
 8003938:	50a3      	str	r3, [r4, r2]
 800393a:	e7c9      	b.n	80038d0 <_malloc_r+0x20>
 800393c:	4622      	mov	r2, r4
 800393e:	6864      	ldr	r4, [r4, #4]
 8003940:	e7cc      	b.n	80038dc <_malloc_r+0x2c>
 8003942:	1cc4      	adds	r4, r0, #3
 8003944:	f024 0403 	bic.w	r4, r4, #3
 8003948:	42a0      	cmp	r0, r4
 800394a:	d0e3      	beq.n	8003914 <_malloc_r+0x64>
 800394c:	1a21      	subs	r1, r4, r0
 800394e:	4630      	mov	r0, r6
 8003950:	f000 fc52 	bl	80041f8 <_sbrk_r>
 8003954:	3001      	adds	r0, #1
 8003956:	d1dd      	bne.n	8003914 <_malloc_r+0x64>
 8003958:	e7cf      	b.n	80038fa <_malloc_r+0x4a>
 800395a:	bf00      	nop
 800395c:	20000124 	.word	0x20000124
 8003960:	20000128 	.word	0x20000128

08003964 <__ssputs_r>:
 8003964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003968:	688e      	ldr	r6, [r1, #8]
 800396a:	4682      	mov	sl, r0
 800396c:	429e      	cmp	r6, r3
 800396e:	460c      	mov	r4, r1
 8003970:	4690      	mov	r8, r2
 8003972:	461f      	mov	r7, r3
 8003974:	d838      	bhi.n	80039e8 <__ssputs_r+0x84>
 8003976:	898a      	ldrh	r2, [r1, #12]
 8003978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800397c:	d032      	beq.n	80039e4 <__ssputs_r+0x80>
 800397e:	6825      	ldr	r5, [r4, #0]
 8003980:	6909      	ldr	r1, [r1, #16]
 8003982:	3301      	adds	r3, #1
 8003984:	eba5 0901 	sub.w	r9, r5, r1
 8003988:	6965      	ldr	r5, [r4, #20]
 800398a:	444b      	add	r3, r9
 800398c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003994:	106d      	asrs	r5, r5, #1
 8003996:	429d      	cmp	r5, r3
 8003998:	bf38      	it	cc
 800399a:	461d      	movcc	r5, r3
 800399c:	0553      	lsls	r3, r2, #21
 800399e:	d531      	bpl.n	8003a04 <__ssputs_r+0xa0>
 80039a0:	4629      	mov	r1, r5
 80039a2:	f7ff ff85 	bl	80038b0 <_malloc_r>
 80039a6:	4606      	mov	r6, r0
 80039a8:	b950      	cbnz	r0, 80039c0 <__ssputs_r+0x5c>
 80039aa:	230c      	movs	r3, #12
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f8ca 3000 	str.w	r3, [sl]
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c0:	464a      	mov	r2, r9
 80039c2:	6921      	ldr	r1, [r4, #16]
 80039c4:	f000 ff1c 	bl	8004800 <memcpy>
 80039c8:	89a3      	ldrh	r3, [r4, #12]
 80039ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d2:	81a3      	strh	r3, [r4, #12]
 80039d4:	6126      	str	r6, [r4, #16]
 80039d6:	444e      	add	r6, r9
 80039d8:	6026      	str	r6, [r4, #0]
 80039da:	463e      	mov	r6, r7
 80039dc:	6165      	str	r5, [r4, #20]
 80039de:	eba5 0509 	sub.w	r5, r5, r9
 80039e2:	60a5      	str	r5, [r4, #8]
 80039e4:	42be      	cmp	r6, r7
 80039e6:	d900      	bls.n	80039ea <__ssputs_r+0x86>
 80039e8:	463e      	mov	r6, r7
 80039ea:	4632      	mov	r2, r6
 80039ec:	4641      	mov	r1, r8
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	f000 ff14 	bl	800481c <memmove>
 80039f4:	68a3      	ldr	r3, [r4, #8]
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	1b9b      	subs	r3, r3, r6
 80039fa:	4432      	add	r2, r6
 80039fc:	2000      	movs	r0, #0
 80039fe:	60a3      	str	r3, [r4, #8]
 8003a00:	6022      	str	r2, [r4, #0]
 8003a02:	e7db      	b.n	80039bc <__ssputs_r+0x58>
 8003a04:	462a      	mov	r2, r5
 8003a06:	f000 ff2f 	bl	8004868 <_realloc_r>
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d1e1      	bne.n	80039d4 <__ssputs_r+0x70>
 8003a10:	4650      	mov	r0, sl
 8003a12:	6921      	ldr	r1, [r4, #16]
 8003a14:	f7ff ff00 	bl	8003818 <_free_r>
 8003a18:	e7c7      	b.n	80039aa <__ssputs_r+0x46>
	...

08003a1c <_svfiprintf_r>:
 8003a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a20:	4698      	mov	r8, r3
 8003a22:	898b      	ldrh	r3, [r1, #12]
 8003a24:	4607      	mov	r7, r0
 8003a26:	061b      	lsls	r3, r3, #24
 8003a28:	460d      	mov	r5, r1
 8003a2a:	4614      	mov	r4, r2
 8003a2c:	b09d      	sub	sp, #116	; 0x74
 8003a2e:	d50e      	bpl.n	8003a4e <_svfiprintf_r+0x32>
 8003a30:	690b      	ldr	r3, [r1, #16]
 8003a32:	b963      	cbnz	r3, 8003a4e <_svfiprintf_r+0x32>
 8003a34:	2140      	movs	r1, #64	; 0x40
 8003a36:	f7ff ff3b 	bl	80038b0 <_malloc_r>
 8003a3a:	6028      	str	r0, [r5, #0]
 8003a3c:	6128      	str	r0, [r5, #16]
 8003a3e:	b920      	cbnz	r0, 8003a4a <_svfiprintf_r+0x2e>
 8003a40:	230c      	movs	r3, #12
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	e0d1      	b.n	8003bee <_svfiprintf_r+0x1d2>
 8003a4a:	2340      	movs	r3, #64	; 0x40
 8003a4c:	616b      	str	r3, [r5, #20]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9309      	str	r3, [sp, #36]	; 0x24
 8003a52:	2320      	movs	r3, #32
 8003a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a58:	2330      	movs	r3, #48	; 0x30
 8003a5a:	f04f 0901 	mov.w	r9, #1
 8003a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c08 <_svfiprintf_r+0x1ec>
 8003a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	469a      	mov	sl, r3
 8003a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a72:	b10a      	cbz	r2, 8003a78 <_svfiprintf_r+0x5c>
 8003a74:	2a25      	cmp	r2, #37	; 0x25
 8003a76:	d1f9      	bne.n	8003a6c <_svfiprintf_r+0x50>
 8003a78:	ebba 0b04 	subs.w	fp, sl, r4
 8003a7c:	d00b      	beq.n	8003a96 <_svfiprintf_r+0x7a>
 8003a7e:	465b      	mov	r3, fp
 8003a80:	4622      	mov	r2, r4
 8003a82:	4629      	mov	r1, r5
 8003a84:	4638      	mov	r0, r7
 8003a86:	f7ff ff6d 	bl	8003964 <__ssputs_r>
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	f000 80aa 	beq.w	8003be4 <_svfiprintf_r+0x1c8>
 8003a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a92:	445a      	add	r2, fp
 8003a94:	9209      	str	r2, [sp, #36]	; 0x24
 8003a96:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80a2 	beq.w	8003be4 <_svfiprintf_r+0x1c8>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aaa:	f10a 0a01 	add.w	sl, sl, #1
 8003aae:	9304      	str	r3, [sp, #16]
 8003ab0:	9307      	str	r3, [sp, #28]
 8003ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ab8:	4654      	mov	r4, sl
 8003aba:	2205      	movs	r2, #5
 8003abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac0:	4851      	ldr	r0, [pc, #324]	; (8003c08 <_svfiprintf_r+0x1ec>)
 8003ac2:	f000 fe8f 	bl	80047e4 <memchr>
 8003ac6:	9a04      	ldr	r2, [sp, #16]
 8003ac8:	b9d8      	cbnz	r0, 8003b02 <_svfiprintf_r+0xe6>
 8003aca:	06d0      	lsls	r0, r2, #27
 8003acc:	bf44      	itt	mi
 8003ace:	2320      	movmi	r3, #32
 8003ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ad4:	0711      	lsls	r1, r2, #28
 8003ad6:	bf44      	itt	mi
 8003ad8:	232b      	movmi	r3, #43	; 0x2b
 8003ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ade:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae4:	d015      	beq.n	8003b12 <_svfiprintf_r+0xf6>
 8003ae6:	4654      	mov	r4, sl
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f04f 0c0a 	mov.w	ip, #10
 8003aee:	9a07      	ldr	r2, [sp, #28]
 8003af0:	4621      	mov	r1, r4
 8003af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003af6:	3b30      	subs	r3, #48	; 0x30
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	d94e      	bls.n	8003b9a <_svfiprintf_r+0x17e>
 8003afc:	b1b0      	cbz	r0, 8003b2c <_svfiprintf_r+0x110>
 8003afe:	9207      	str	r2, [sp, #28]
 8003b00:	e014      	b.n	8003b2c <_svfiprintf_r+0x110>
 8003b02:	eba0 0308 	sub.w	r3, r0, r8
 8003b06:	fa09 f303 	lsl.w	r3, r9, r3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	46a2      	mov	sl, r4
 8003b0e:	9304      	str	r3, [sp, #16]
 8003b10:	e7d2      	b.n	8003ab8 <_svfiprintf_r+0x9c>
 8003b12:	9b03      	ldr	r3, [sp, #12]
 8003b14:	1d19      	adds	r1, r3, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	9103      	str	r1, [sp, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bfbb      	ittet	lt
 8003b1e:	425b      	neglt	r3, r3
 8003b20:	f042 0202 	orrlt.w	r2, r2, #2
 8003b24:	9307      	strge	r3, [sp, #28]
 8003b26:	9307      	strlt	r3, [sp, #28]
 8003b28:	bfb8      	it	lt
 8003b2a:	9204      	strlt	r2, [sp, #16]
 8003b2c:	7823      	ldrb	r3, [r4, #0]
 8003b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003b30:	d10c      	bne.n	8003b4c <_svfiprintf_r+0x130>
 8003b32:	7863      	ldrb	r3, [r4, #1]
 8003b34:	2b2a      	cmp	r3, #42	; 0x2a
 8003b36:	d135      	bne.n	8003ba4 <_svfiprintf_r+0x188>
 8003b38:	9b03      	ldr	r3, [sp, #12]
 8003b3a:	3402      	adds	r4, #2
 8003b3c:	1d1a      	adds	r2, r3, #4
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	9203      	str	r2, [sp, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bfb8      	it	lt
 8003b46:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b4a:	9305      	str	r3, [sp, #20]
 8003b4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c18 <_svfiprintf_r+0x1fc>
 8003b50:	2203      	movs	r2, #3
 8003b52:	4650      	mov	r0, sl
 8003b54:	7821      	ldrb	r1, [r4, #0]
 8003b56:	f000 fe45 	bl	80047e4 <memchr>
 8003b5a:	b140      	cbz	r0, 8003b6e <_svfiprintf_r+0x152>
 8003b5c:	2340      	movs	r3, #64	; 0x40
 8003b5e:	eba0 000a 	sub.w	r0, r0, sl
 8003b62:	fa03 f000 	lsl.w	r0, r3, r0
 8003b66:	9b04      	ldr	r3, [sp, #16]
 8003b68:	3401      	adds	r4, #1
 8003b6a:	4303      	orrs	r3, r0
 8003b6c:	9304      	str	r3, [sp, #16]
 8003b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b72:	2206      	movs	r2, #6
 8003b74:	4825      	ldr	r0, [pc, #148]	; (8003c0c <_svfiprintf_r+0x1f0>)
 8003b76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b7a:	f000 fe33 	bl	80047e4 <memchr>
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d038      	beq.n	8003bf4 <_svfiprintf_r+0x1d8>
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <_svfiprintf_r+0x1f4>)
 8003b84:	bb1b      	cbnz	r3, 8003bce <_svfiprintf_r+0x1b2>
 8003b86:	9b03      	ldr	r3, [sp, #12]
 8003b88:	3307      	adds	r3, #7
 8003b8a:	f023 0307 	bic.w	r3, r3, #7
 8003b8e:	3308      	adds	r3, #8
 8003b90:	9303      	str	r3, [sp, #12]
 8003b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b94:	4433      	add	r3, r6
 8003b96:	9309      	str	r3, [sp, #36]	; 0x24
 8003b98:	e767      	b.n	8003a6a <_svfiprintf_r+0x4e>
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ba2:	e7a5      	b.n	8003af0 <_svfiprintf_r+0xd4>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f04f 0c0a 	mov.w	ip, #10
 8003baa:	4619      	mov	r1, r3
 8003bac:	3401      	adds	r4, #1
 8003bae:	9305      	str	r3, [sp, #20]
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bb6:	3a30      	subs	r2, #48	; 0x30
 8003bb8:	2a09      	cmp	r2, #9
 8003bba:	d903      	bls.n	8003bc4 <_svfiprintf_r+0x1a8>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0c5      	beq.n	8003b4c <_svfiprintf_r+0x130>
 8003bc0:	9105      	str	r1, [sp, #20]
 8003bc2:	e7c3      	b.n	8003b4c <_svfiprintf_r+0x130>
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bcc:	e7f0      	b.n	8003bb0 <_svfiprintf_r+0x194>
 8003bce:	ab03      	add	r3, sp, #12
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	462a      	mov	r2, r5
 8003bd4:	4638      	mov	r0, r7
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <_svfiprintf_r+0x1f8>)
 8003bd8:	a904      	add	r1, sp, #16
 8003bda:	f3af 8000 	nop.w
 8003bde:	1c42      	adds	r2, r0, #1
 8003be0:	4606      	mov	r6, r0
 8003be2:	d1d6      	bne.n	8003b92 <_svfiprintf_r+0x176>
 8003be4:	89ab      	ldrh	r3, [r5, #12]
 8003be6:	065b      	lsls	r3, r3, #25
 8003be8:	f53f af2c 	bmi.w	8003a44 <_svfiprintf_r+0x28>
 8003bec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bee:	b01d      	add	sp, #116	; 0x74
 8003bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf4:	ab03      	add	r3, sp, #12
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	462a      	mov	r2, r5
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <_svfiprintf_r+0x1f8>)
 8003bfe:	a904      	add	r1, sp, #16
 8003c00:	f000 f9d4 	bl	8003fac <_printf_i>
 8003c04:	e7eb      	b.n	8003bde <_svfiprintf_r+0x1c2>
 8003c06:	bf00      	nop
 8003c08:	08004bbc 	.word	0x08004bbc
 8003c0c:	08004bc6 	.word	0x08004bc6
 8003c10:	00000000 	.word	0x00000000
 8003c14:	08003965 	.word	0x08003965
 8003c18:	08004bc2 	.word	0x08004bc2

08003c1c <__sfputc_r>:
 8003c1c:	6893      	ldr	r3, [r2, #8]
 8003c1e:	b410      	push	{r4}
 8003c20:	3b01      	subs	r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	6093      	str	r3, [r2, #8]
 8003c26:	da07      	bge.n	8003c38 <__sfputc_r+0x1c>
 8003c28:	6994      	ldr	r4, [r2, #24]
 8003c2a:	42a3      	cmp	r3, r4
 8003c2c:	db01      	blt.n	8003c32 <__sfputc_r+0x16>
 8003c2e:	290a      	cmp	r1, #10
 8003c30:	d102      	bne.n	8003c38 <__sfputc_r+0x1c>
 8003c32:	bc10      	pop	{r4}
 8003c34:	f000 baf0 	b.w	8004218 <__swbuf_r>
 8003c38:	6813      	ldr	r3, [r2, #0]
 8003c3a:	1c58      	adds	r0, r3, #1
 8003c3c:	6010      	str	r0, [r2, #0]
 8003c3e:	7019      	strb	r1, [r3, #0]
 8003c40:	4608      	mov	r0, r1
 8003c42:	bc10      	pop	{r4}
 8003c44:	4770      	bx	lr

08003c46 <__sfputs_r>:
 8003c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c48:	4606      	mov	r6, r0
 8003c4a:	460f      	mov	r7, r1
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	18d5      	adds	r5, r2, r3
 8003c50:	42ac      	cmp	r4, r5
 8003c52:	d101      	bne.n	8003c58 <__sfputs_r+0x12>
 8003c54:	2000      	movs	r0, #0
 8003c56:	e007      	b.n	8003c68 <__sfputs_r+0x22>
 8003c58:	463a      	mov	r2, r7
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c60:	f7ff ffdc 	bl	8003c1c <__sfputc_r>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	d1f3      	bne.n	8003c50 <__sfputs_r+0xa>
 8003c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c6c <_vfiprintf_r>:
 8003c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c70:	460d      	mov	r5, r1
 8003c72:	4614      	mov	r4, r2
 8003c74:	4698      	mov	r8, r3
 8003c76:	4606      	mov	r6, r0
 8003c78:	b09d      	sub	sp, #116	; 0x74
 8003c7a:	b118      	cbz	r0, 8003c84 <_vfiprintf_r+0x18>
 8003c7c:	6983      	ldr	r3, [r0, #24]
 8003c7e:	b90b      	cbnz	r3, 8003c84 <_vfiprintf_r+0x18>
 8003c80:	f000 fcac 	bl	80045dc <__sinit>
 8003c84:	4b89      	ldr	r3, [pc, #548]	; (8003eac <_vfiprintf_r+0x240>)
 8003c86:	429d      	cmp	r5, r3
 8003c88:	d11b      	bne.n	8003cc2 <_vfiprintf_r+0x56>
 8003c8a:	6875      	ldr	r5, [r6, #4]
 8003c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c8e:	07d9      	lsls	r1, r3, #31
 8003c90:	d405      	bmi.n	8003c9e <_vfiprintf_r+0x32>
 8003c92:	89ab      	ldrh	r3, [r5, #12]
 8003c94:	059a      	lsls	r2, r3, #22
 8003c96:	d402      	bmi.n	8003c9e <_vfiprintf_r+0x32>
 8003c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c9a:	f000 fd3d 	bl	8004718 <__retarget_lock_acquire_recursive>
 8003c9e:	89ab      	ldrh	r3, [r5, #12]
 8003ca0:	071b      	lsls	r3, r3, #28
 8003ca2:	d501      	bpl.n	8003ca8 <_vfiprintf_r+0x3c>
 8003ca4:	692b      	ldr	r3, [r5, #16]
 8003ca6:	b9eb      	cbnz	r3, 8003ce4 <_vfiprintf_r+0x78>
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4630      	mov	r0, r6
 8003cac:	f000 fb06 	bl	80042bc <__swsetup_r>
 8003cb0:	b1c0      	cbz	r0, 8003ce4 <_vfiprintf_r+0x78>
 8003cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cb4:	07dc      	lsls	r4, r3, #31
 8003cb6:	d50e      	bpl.n	8003cd6 <_vfiprintf_r+0x6a>
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	b01d      	add	sp, #116	; 0x74
 8003cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc2:	4b7b      	ldr	r3, [pc, #492]	; (8003eb0 <_vfiprintf_r+0x244>)
 8003cc4:	429d      	cmp	r5, r3
 8003cc6:	d101      	bne.n	8003ccc <_vfiprintf_r+0x60>
 8003cc8:	68b5      	ldr	r5, [r6, #8]
 8003cca:	e7df      	b.n	8003c8c <_vfiprintf_r+0x20>
 8003ccc:	4b79      	ldr	r3, [pc, #484]	; (8003eb4 <_vfiprintf_r+0x248>)
 8003cce:	429d      	cmp	r5, r3
 8003cd0:	bf08      	it	eq
 8003cd2:	68f5      	ldreq	r5, [r6, #12]
 8003cd4:	e7da      	b.n	8003c8c <_vfiprintf_r+0x20>
 8003cd6:	89ab      	ldrh	r3, [r5, #12]
 8003cd8:	0598      	lsls	r0, r3, #22
 8003cda:	d4ed      	bmi.n	8003cb8 <_vfiprintf_r+0x4c>
 8003cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cde:	f000 fd1c 	bl	800471a <__retarget_lock_release_recursive>
 8003ce2:	e7e9      	b.n	8003cb8 <_vfiprintf_r+0x4c>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ce8:	2320      	movs	r3, #32
 8003cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cee:	2330      	movs	r3, #48	; 0x30
 8003cf0:	f04f 0901 	mov.w	r9, #1
 8003cf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cf8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003eb8 <_vfiprintf_r+0x24c>
 8003cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d00:	4623      	mov	r3, r4
 8003d02:	469a      	mov	sl, r3
 8003d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d08:	b10a      	cbz	r2, 8003d0e <_vfiprintf_r+0xa2>
 8003d0a:	2a25      	cmp	r2, #37	; 0x25
 8003d0c:	d1f9      	bne.n	8003d02 <_vfiprintf_r+0x96>
 8003d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8003d12:	d00b      	beq.n	8003d2c <_vfiprintf_r+0xc0>
 8003d14:	465b      	mov	r3, fp
 8003d16:	4622      	mov	r2, r4
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f7ff ff93 	bl	8003c46 <__sfputs_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	f000 80aa 	beq.w	8003e7a <_vfiprintf_r+0x20e>
 8003d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d28:	445a      	add	r2, fp
 8003d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a2 	beq.w	8003e7a <_vfiprintf_r+0x20e>
 8003d36:	2300      	movs	r3, #0
 8003d38:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d40:	f10a 0a01 	add.w	sl, sl, #1
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	9307      	str	r3, [sp, #28]
 8003d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d4e:	4654      	mov	r4, sl
 8003d50:	2205      	movs	r2, #5
 8003d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d56:	4858      	ldr	r0, [pc, #352]	; (8003eb8 <_vfiprintf_r+0x24c>)
 8003d58:	f000 fd44 	bl	80047e4 <memchr>
 8003d5c:	9a04      	ldr	r2, [sp, #16]
 8003d5e:	b9d8      	cbnz	r0, 8003d98 <_vfiprintf_r+0x12c>
 8003d60:	06d1      	lsls	r1, r2, #27
 8003d62:	bf44      	itt	mi
 8003d64:	2320      	movmi	r3, #32
 8003d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d6a:	0713      	lsls	r3, r2, #28
 8003d6c:	bf44      	itt	mi
 8003d6e:	232b      	movmi	r3, #43	; 0x2b
 8003d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d74:	f89a 3000 	ldrb.w	r3, [sl]
 8003d78:	2b2a      	cmp	r3, #42	; 0x2a
 8003d7a:	d015      	beq.n	8003da8 <_vfiprintf_r+0x13c>
 8003d7c:	4654      	mov	r4, sl
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f04f 0c0a 	mov.w	ip, #10
 8003d84:	9a07      	ldr	r2, [sp, #28]
 8003d86:	4621      	mov	r1, r4
 8003d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d8c:	3b30      	subs	r3, #48	; 0x30
 8003d8e:	2b09      	cmp	r3, #9
 8003d90:	d94e      	bls.n	8003e30 <_vfiprintf_r+0x1c4>
 8003d92:	b1b0      	cbz	r0, 8003dc2 <_vfiprintf_r+0x156>
 8003d94:	9207      	str	r2, [sp, #28]
 8003d96:	e014      	b.n	8003dc2 <_vfiprintf_r+0x156>
 8003d98:	eba0 0308 	sub.w	r3, r0, r8
 8003d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8003da0:	4313      	orrs	r3, r2
 8003da2:	46a2      	mov	sl, r4
 8003da4:	9304      	str	r3, [sp, #16]
 8003da6:	e7d2      	b.n	8003d4e <_vfiprintf_r+0xe2>
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	1d19      	adds	r1, r3, #4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	9103      	str	r1, [sp, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	bfbb      	ittet	lt
 8003db4:	425b      	neglt	r3, r3
 8003db6:	f042 0202 	orrlt.w	r2, r2, #2
 8003dba:	9307      	strge	r3, [sp, #28]
 8003dbc:	9307      	strlt	r3, [sp, #28]
 8003dbe:	bfb8      	it	lt
 8003dc0:	9204      	strlt	r2, [sp, #16]
 8003dc2:	7823      	ldrb	r3, [r4, #0]
 8003dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8003dc6:	d10c      	bne.n	8003de2 <_vfiprintf_r+0x176>
 8003dc8:	7863      	ldrb	r3, [r4, #1]
 8003dca:	2b2a      	cmp	r3, #42	; 0x2a
 8003dcc:	d135      	bne.n	8003e3a <_vfiprintf_r+0x1ce>
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	3402      	adds	r4, #2
 8003dd2:	1d1a      	adds	r2, r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	9203      	str	r2, [sp, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bfb8      	it	lt
 8003ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003de0:	9305      	str	r3, [sp, #20]
 8003de2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ec8 <_vfiprintf_r+0x25c>
 8003de6:	2203      	movs	r2, #3
 8003de8:	4650      	mov	r0, sl
 8003dea:	7821      	ldrb	r1, [r4, #0]
 8003dec:	f000 fcfa 	bl	80047e4 <memchr>
 8003df0:	b140      	cbz	r0, 8003e04 <_vfiprintf_r+0x198>
 8003df2:	2340      	movs	r3, #64	; 0x40
 8003df4:	eba0 000a 	sub.w	r0, r0, sl
 8003df8:	fa03 f000 	lsl.w	r0, r3, r0
 8003dfc:	9b04      	ldr	r3, [sp, #16]
 8003dfe:	3401      	adds	r4, #1
 8003e00:	4303      	orrs	r3, r0
 8003e02:	9304      	str	r3, [sp, #16]
 8003e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e08:	2206      	movs	r2, #6
 8003e0a:	482c      	ldr	r0, [pc, #176]	; (8003ebc <_vfiprintf_r+0x250>)
 8003e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e10:	f000 fce8 	bl	80047e4 <memchr>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d03f      	beq.n	8003e98 <_vfiprintf_r+0x22c>
 8003e18:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <_vfiprintf_r+0x254>)
 8003e1a:	bb1b      	cbnz	r3, 8003e64 <_vfiprintf_r+0x1f8>
 8003e1c:	9b03      	ldr	r3, [sp, #12]
 8003e1e:	3307      	adds	r3, #7
 8003e20:	f023 0307 	bic.w	r3, r3, #7
 8003e24:	3308      	adds	r3, #8
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e2a:	443b      	add	r3, r7
 8003e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2e:	e767      	b.n	8003d00 <_vfiprintf_r+0x94>
 8003e30:	460c      	mov	r4, r1
 8003e32:	2001      	movs	r0, #1
 8003e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e38:	e7a5      	b.n	8003d86 <_vfiprintf_r+0x11a>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f04f 0c0a 	mov.w	ip, #10
 8003e40:	4619      	mov	r1, r3
 8003e42:	3401      	adds	r4, #1
 8003e44:	9305      	str	r3, [sp, #20]
 8003e46:	4620      	mov	r0, r4
 8003e48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e4c:	3a30      	subs	r2, #48	; 0x30
 8003e4e:	2a09      	cmp	r2, #9
 8003e50:	d903      	bls.n	8003e5a <_vfiprintf_r+0x1ee>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0c5      	beq.n	8003de2 <_vfiprintf_r+0x176>
 8003e56:	9105      	str	r1, [sp, #20]
 8003e58:	e7c3      	b.n	8003de2 <_vfiprintf_r+0x176>
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e62:	e7f0      	b.n	8003e46 <_vfiprintf_r+0x1da>
 8003e64:	ab03      	add	r3, sp, #12
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	462a      	mov	r2, r5
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <_vfiprintf_r+0x258>)
 8003e6e:	a904      	add	r1, sp, #16
 8003e70:	f3af 8000 	nop.w
 8003e74:	4607      	mov	r7, r0
 8003e76:	1c78      	adds	r0, r7, #1
 8003e78:	d1d6      	bne.n	8003e28 <_vfiprintf_r+0x1bc>
 8003e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e7c:	07d9      	lsls	r1, r3, #31
 8003e7e:	d405      	bmi.n	8003e8c <_vfiprintf_r+0x220>
 8003e80:	89ab      	ldrh	r3, [r5, #12]
 8003e82:	059a      	lsls	r2, r3, #22
 8003e84:	d402      	bmi.n	8003e8c <_vfiprintf_r+0x220>
 8003e86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e88:	f000 fc47 	bl	800471a <__retarget_lock_release_recursive>
 8003e8c:	89ab      	ldrh	r3, [r5, #12]
 8003e8e:	065b      	lsls	r3, r3, #25
 8003e90:	f53f af12 	bmi.w	8003cb8 <_vfiprintf_r+0x4c>
 8003e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e96:	e711      	b.n	8003cbc <_vfiprintf_r+0x50>
 8003e98:	ab03      	add	r3, sp, #12
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	462a      	mov	r2, r5
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <_vfiprintf_r+0x258>)
 8003ea2:	a904      	add	r1, sp, #16
 8003ea4:	f000 f882 	bl	8003fac <_printf_i>
 8003ea8:	e7e4      	b.n	8003e74 <_vfiprintf_r+0x208>
 8003eaa:	bf00      	nop
 8003eac:	08004c10 	.word	0x08004c10
 8003eb0:	08004c30 	.word	0x08004c30
 8003eb4:	08004bf0 	.word	0x08004bf0
 8003eb8:	08004bbc 	.word	0x08004bbc
 8003ebc:	08004bc6 	.word	0x08004bc6
 8003ec0:	00000000 	.word	0x00000000
 8003ec4:	08003c47 	.word	0x08003c47
 8003ec8:	08004bc2 	.word	0x08004bc2

08003ecc <_printf_common>:
 8003ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	4699      	mov	r9, r3
 8003ed4:	688a      	ldr	r2, [r1, #8]
 8003ed6:	690b      	ldr	r3, [r1, #16]
 8003ed8:	4607      	mov	r7, r0
 8003eda:	4293      	cmp	r3, r2
 8003edc:	bfb8      	it	lt
 8003ede:	4613      	movlt	r3, r2
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003eec:	b10a      	cbz	r2, 8003ef2 <_printf_common+0x26>
 8003eee:	3301      	adds	r3, #1
 8003ef0:	6033      	str	r3, [r6, #0]
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	0699      	lsls	r1, r3, #26
 8003ef6:	bf42      	ittt	mi
 8003ef8:	6833      	ldrmi	r3, [r6, #0]
 8003efa:	3302      	addmi	r3, #2
 8003efc:	6033      	strmi	r3, [r6, #0]
 8003efe:	6825      	ldr	r5, [r4, #0]
 8003f00:	f015 0506 	ands.w	r5, r5, #6
 8003f04:	d106      	bne.n	8003f14 <_printf_common+0x48>
 8003f06:	f104 0a19 	add.w	sl, r4, #25
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	6832      	ldr	r2, [r6, #0]
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	42ab      	cmp	r3, r5
 8003f12:	dc28      	bgt.n	8003f66 <_printf_common+0x9a>
 8003f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f18:	1e13      	subs	r3, r2, #0
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	bf18      	it	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	0692      	lsls	r2, r2, #26
 8003f22:	d42d      	bmi.n	8003f80 <_printf_common+0xb4>
 8003f24:	4649      	mov	r1, r9
 8003f26:	4638      	mov	r0, r7
 8003f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f2c:	47c0      	blx	r8
 8003f2e:	3001      	adds	r0, #1
 8003f30:	d020      	beq.n	8003f74 <_printf_common+0xa8>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	68e5      	ldr	r5, [r4, #12]
 8003f36:	f003 0306 	and.w	r3, r3, #6
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf18      	it	ne
 8003f3e:	2500      	movne	r5, #0
 8003f40:	6832      	ldr	r2, [r6, #0]
 8003f42:	f04f 0600 	mov.w	r6, #0
 8003f46:	68a3      	ldr	r3, [r4, #8]
 8003f48:	bf08      	it	eq
 8003f4a:	1aad      	subeq	r5, r5, r2
 8003f4c:	6922      	ldr	r2, [r4, #16]
 8003f4e:	bf08      	it	eq
 8003f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bfc4      	itt	gt
 8003f58:	1a9b      	subgt	r3, r3, r2
 8003f5a:	18ed      	addgt	r5, r5, r3
 8003f5c:	341a      	adds	r4, #26
 8003f5e:	42b5      	cmp	r5, r6
 8003f60:	d11a      	bne.n	8003f98 <_printf_common+0xcc>
 8003f62:	2000      	movs	r0, #0
 8003f64:	e008      	b.n	8003f78 <_printf_common+0xac>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4652      	mov	r2, sl
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	47c0      	blx	r8
 8003f70:	3001      	adds	r0, #1
 8003f72:	d103      	bne.n	8003f7c <_printf_common+0xb0>
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f7c:	3501      	adds	r5, #1
 8003f7e:	e7c4      	b.n	8003f0a <_printf_common+0x3e>
 8003f80:	2030      	movs	r0, #48	; 0x30
 8003f82:	18e1      	adds	r1, r4, r3
 8003f84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f8e:	4422      	add	r2, r4
 8003f90:	3302      	adds	r3, #2
 8003f92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f96:	e7c5      	b.n	8003f24 <_printf_common+0x58>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	4649      	mov	r1, r9
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	47c0      	blx	r8
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d0e6      	beq.n	8003f74 <_printf_common+0xa8>
 8003fa6:	3601      	adds	r6, #1
 8003fa8:	e7d9      	b.n	8003f5e <_printf_common+0x92>
	...

08003fac <_printf_i>:
 8003fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	7e27      	ldrb	r7, [r4, #24]
 8003fb4:	4691      	mov	r9, r2
 8003fb6:	2f78      	cmp	r7, #120	; 0x78
 8003fb8:	4680      	mov	r8, r0
 8003fba:	469a      	mov	sl, r3
 8003fbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc2:	d807      	bhi.n	8003fd4 <_printf_i+0x28>
 8003fc4:	2f62      	cmp	r7, #98	; 0x62
 8003fc6:	d80a      	bhi.n	8003fde <_printf_i+0x32>
 8003fc8:	2f00      	cmp	r7, #0
 8003fca:	f000 80d9 	beq.w	8004180 <_printf_i+0x1d4>
 8003fce:	2f58      	cmp	r7, #88	; 0x58
 8003fd0:	f000 80a4 	beq.w	800411c <_printf_i+0x170>
 8003fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fdc:	e03a      	b.n	8004054 <_printf_i+0xa8>
 8003fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fe2:	2b15      	cmp	r3, #21
 8003fe4:	d8f6      	bhi.n	8003fd4 <_printf_i+0x28>
 8003fe6:	a001      	add	r0, pc, #4	; (adr r0, 8003fec <_printf_i+0x40>)
 8003fe8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fec:	08004045 	.word	0x08004045
 8003ff0:	08004059 	.word	0x08004059
 8003ff4:	08003fd5 	.word	0x08003fd5
 8003ff8:	08003fd5 	.word	0x08003fd5
 8003ffc:	08003fd5 	.word	0x08003fd5
 8004000:	08003fd5 	.word	0x08003fd5
 8004004:	08004059 	.word	0x08004059
 8004008:	08003fd5 	.word	0x08003fd5
 800400c:	08003fd5 	.word	0x08003fd5
 8004010:	08003fd5 	.word	0x08003fd5
 8004014:	08003fd5 	.word	0x08003fd5
 8004018:	08004167 	.word	0x08004167
 800401c:	08004089 	.word	0x08004089
 8004020:	08004149 	.word	0x08004149
 8004024:	08003fd5 	.word	0x08003fd5
 8004028:	08003fd5 	.word	0x08003fd5
 800402c:	08004189 	.word	0x08004189
 8004030:	08003fd5 	.word	0x08003fd5
 8004034:	08004089 	.word	0x08004089
 8004038:	08003fd5 	.word	0x08003fd5
 800403c:	08003fd5 	.word	0x08003fd5
 8004040:	08004151 	.word	0x08004151
 8004044:	680b      	ldr	r3, [r1, #0]
 8004046:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	600a      	str	r2, [r1, #0]
 8004050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004054:	2301      	movs	r3, #1
 8004056:	e0a4      	b.n	80041a2 <_printf_i+0x1f6>
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	6808      	ldr	r0, [r1, #0]
 800405c:	062e      	lsls	r6, r5, #24
 800405e:	f100 0304 	add.w	r3, r0, #4
 8004062:	d50a      	bpl.n	800407a <_printf_i+0xce>
 8004064:	6805      	ldr	r5, [r0, #0]
 8004066:	600b      	str	r3, [r1, #0]
 8004068:	2d00      	cmp	r5, #0
 800406a:	da03      	bge.n	8004074 <_printf_i+0xc8>
 800406c:	232d      	movs	r3, #45	; 0x2d
 800406e:	426d      	negs	r5, r5
 8004070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004074:	230a      	movs	r3, #10
 8004076:	485e      	ldr	r0, [pc, #376]	; (80041f0 <_printf_i+0x244>)
 8004078:	e019      	b.n	80040ae <_printf_i+0x102>
 800407a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800407e:	6805      	ldr	r5, [r0, #0]
 8004080:	600b      	str	r3, [r1, #0]
 8004082:	bf18      	it	ne
 8004084:	b22d      	sxthne	r5, r5
 8004086:	e7ef      	b.n	8004068 <_printf_i+0xbc>
 8004088:	680b      	ldr	r3, [r1, #0]
 800408a:	6825      	ldr	r5, [r4, #0]
 800408c:	1d18      	adds	r0, r3, #4
 800408e:	6008      	str	r0, [r1, #0]
 8004090:	0628      	lsls	r0, r5, #24
 8004092:	d501      	bpl.n	8004098 <_printf_i+0xec>
 8004094:	681d      	ldr	r5, [r3, #0]
 8004096:	e002      	b.n	800409e <_printf_i+0xf2>
 8004098:	0669      	lsls	r1, r5, #25
 800409a:	d5fb      	bpl.n	8004094 <_printf_i+0xe8>
 800409c:	881d      	ldrh	r5, [r3, #0]
 800409e:	2f6f      	cmp	r7, #111	; 0x6f
 80040a0:	bf0c      	ite	eq
 80040a2:	2308      	moveq	r3, #8
 80040a4:	230a      	movne	r3, #10
 80040a6:	4852      	ldr	r0, [pc, #328]	; (80041f0 <_printf_i+0x244>)
 80040a8:	2100      	movs	r1, #0
 80040aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040ae:	6866      	ldr	r6, [r4, #4]
 80040b0:	2e00      	cmp	r6, #0
 80040b2:	bfa8      	it	ge
 80040b4:	6821      	ldrge	r1, [r4, #0]
 80040b6:	60a6      	str	r6, [r4, #8]
 80040b8:	bfa4      	itt	ge
 80040ba:	f021 0104 	bicge.w	r1, r1, #4
 80040be:	6021      	strge	r1, [r4, #0]
 80040c0:	b90d      	cbnz	r5, 80040c6 <_printf_i+0x11a>
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	d04d      	beq.n	8004162 <_printf_i+0x1b6>
 80040c6:	4616      	mov	r6, r2
 80040c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80040cc:	fb03 5711 	mls	r7, r3, r1, r5
 80040d0:	5dc7      	ldrb	r7, [r0, r7]
 80040d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040d6:	462f      	mov	r7, r5
 80040d8:	42bb      	cmp	r3, r7
 80040da:	460d      	mov	r5, r1
 80040dc:	d9f4      	bls.n	80040c8 <_printf_i+0x11c>
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d10b      	bne.n	80040fa <_printf_i+0x14e>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	07df      	lsls	r7, r3, #31
 80040e6:	d508      	bpl.n	80040fa <_printf_i+0x14e>
 80040e8:	6923      	ldr	r3, [r4, #16]
 80040ea:	6861      	ldr	r1, [r4, #4]
 80040ec:	4299      	cmp	r1, r3
 80040ee:	bfde      	ittt	le
 80040f0:	2330      	movle	r3, #48	; 0x30
 80040f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040fa:	1b92      	subs	r2, r2, r6
 80040fc:	6122      	str	r2, [r4, #16]
 80040fe:	464b      	mov	r3, r9
 8004100:	4621      	mov	r1, r4
 8004102:	4640      	mov	r0, r8
 8004104:	f8cd a000 	str.w	sl, [sp]
 8004108:	aa03      	add	r2, sp, #12
 800410a:	f7ff fedf 	bl	8003ecc <_printf_common>
 800410e:	3001      	adds	r0, #1
 8004110:	d14c      	bne.n	80041ac <_printf_i+0x200>
 8004112:	f04f 30ff 	mov.w	r0, #4294967295
 8004116:	b004      	add	sp, #16
 8004118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411c:	4834      	ldr	r0, [pc, #208]	; (80041f0 <_printf_i+0x244>)
 800411e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004122:	680e      	ldr	r6, [r1, #0]
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	f856 5b04 	ldr.w	r5, [r6], #4
 800412a:	061f      	lsls	r7, r3, #24
 800412c:	600e      	str	r6, [r1, #0]
 800412e:	d514      	bpl.n	800415a <_printf_i+0x1ae>
 8004130:	07d9      	lsls	r1, r3, #31
 8004132:	bf44      	itt	mi
 8004134:	f043 0320 	orrmi.w	r3, r3, #32
 8004138:	6023      	strmi	r3, [r4, #0]
 800413a:	b91d      	cbnz	r5, 8004144 <_printf_i+0x198>
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	f023 0320 	bic.w	r3, r3, #32
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	2310      	movs	r3, #16
 8004146:	e7af      	b.n	80040a8 <_printf_i+0xfc>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f043 0320 	orr.w	r3, r3, #32
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	2378      	movs	r3, #120	; 0x78
 8004152:	4828      	ldr	r0, [pc, #160]	; (80041f4 <_printf_i+0x248>)
 8004154:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004158:	e7e3      	b.n	8004122 <_printf_i+0x176>
 800415a:	065e      	lsls	r6, r3, #25
 800415c:	bf48      	it	mi
 800415e:	b2ad      	uxthmi	r5, r5
 8004160:	e7e6      	b.n	8004130 <_printf_i+0x184>
 8004162:	4616      	mov	r6, r2
 8004164:	e7bb      	b.n	80040de <_printf_i+0x132>
 8004166:	680b      	ldr	r3, [r1, #0]
 8004168:	6826      	ldr	r6, [r4, #0]
 800416a:	1d1d      	adds	r5, r3, #4
 800416c:	6960      	ldr	r0, [r4, #20]
 800416e:	600d      	str	r5, [r1, #0]
 8004170:	0635      	lsls	r5, r6, #24
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	d501      	bpl.n	800417a <_printf_i+0x1ce>
 8004176:	6018      	str	r0, [r3, #0]
 8004178:	e002      	b.n	8004180 <_printf_i+0x1d4>
 800417a:	0671      	lsls	r1, r6, #25
 800417c:	d5fb      	bpl.n	8004176 <_printf_i+0x1ca>
 800417e:	8018      	strh	r0, [r3, #0]
 8004180:	2300      	movs	r3, #0
 8004182:	4616      	mov	r6, r2
 8004184:	6123      	str	r3, [r4, #16]
 8004186:	e7ba      	b.n	80040fe <_printf_i+0x152>
 8004188:	680b      	ldr	r3, [r1, #0]
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	600a      	str	r2, [r1, #0]
 800418e:	681e      	ldr	r6, [r3, #0]
 8004190:	2100      	movs	r1, #0
 8004192:	4630      	mov	r0, r6
 8004194:	6862      	ldr	r2, [r4, #4]
 8004196:	f000 fb25 	bl	80047e4 <memchr>
 800419a:	b108      	cbz	r0, 80041a0 <_printf_i+0x1f4>
 800419c:	1b80      	subs	r0, r0, r6
 800419e:	6060      	str	r0, [r4, #4]
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	6123      	str	r3, [r4, #16]
 80041a4:	2300      	movs	r3, #0
 80041a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041aa:	e7a8      	b.n	80040fe <_printf_i+0x152>
 80041ac:	4632      	mov	r2, r6
 80041ae:	4649      	mov	r1, r9
 80041b0:	4640      	mov	r0, r8
 80041b2:	6923      	ldr	r3, [r4, #16]
 80041b4:	47d0      	blx	sl
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0ab      	beq.n	8004112 <_printf_i+0x166>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d413      	bmi.n	80041e8 <_printf_i+0x23c>
 80041c0:	68e0      	ldr	r0, [r4, #12]
 80041c2:	9b03      	ldr	r3, [sp, #12]
 80041c4:	4298      	cmp	r0, r3
 80041c6:	bfb8      	it	lt
 80041c8:	4618      	movlt	r0, r3
 80041ca:	e7a4      	b.n	8004116 <_printf_i+0x16a>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4632      	mov	r2, r6
 80041d0:	4649      	mov	r1, r9
 80041d2:	4640      	mov	r0, r8
 80041d4:	47d0      	blx	sl
 80041d6:	3001      	adds	r0, #1
 80041d8:	d09b      	beq.n	8004112 <_printf_i+0x166>
 80041da:	3501      	adds	r5, #1
 80041dc:	68e3      	ldr	r3, [r4, #12]
 80041de:	9903      	ldr	r1, [sp, #12]
 80041e0:	1a5b      	subs	r3, r3, r1
 80041e2:	42ab      	cmp	r3, r5
 80041e4:	dcf2      	bgt.n	80041cc <_printf_i+0x220>
 80041e6:	e7eb      	b.n	80041c0 <_printf_i+0x214>
 80041e8:	2500      	movs	r5, #0
 80041ea:	f104 0619 	add.w	r6, r4, #25
 80041ee:	e7f5      	b.n	80041dc <_printf_i+0x230>
 80041f0:	08004bcd 	.word	0x08004bcd
 80041f4:	08004bde 	.word	0x08004bde

080041f8 <_sbrk_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	2300      	movs	r3, #0
 80041fc:	4d05      	ldr	r5, [pc, #20]	; (8004214 <_sbrk_r+0x1c>)
 80041fe:	4604      	mov	r4, r0
 8004200:	4608      	mov	r0, r1
 8004202:	602b      	str	r3, [r5, #0]
 8004204:	f7fc fc14 	bl	8000a30 <_sbrk>
 8004208:	1c43      	adds	r3, r0, #1
 800420a:	d102      	bne.n	8004212 <_sbrk_r+0x1a>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	b103      	cbz	r3, 8004212 <_sbrk_r+0x1a>
 8004210:	6023      	str	r3, [r4, #0]
 8004212:	bd38      	pop	{r3, r4, r5, pc}
 8004214:	200002a4 	.word	0x200002a4

08004218 <__swbuf_r>:
 8004218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421a:	460e      	mov	r6, r1
 800421c:	4614      	mov	r4, r2
 800421e:	4605      	mov	r5, r0
 8004220:	b118      	cbz	r0, 800422a <__swbuf_r+0x12>
 8004222:	6983      	ldr	r3, [r0, #24]
 8004224:	b90b      	cbnz	r3, 800422a <__swbuf_r+0x12>
 8004226:	f000 f9d9 	bl	80045dc <__sinit>
 800422a:	4b21      	ldr	r3, [pc, #132]	; (80042b0 <__swbuf_r+0x98>)
 800422c:	429c      	cmp	r4, r3
 800422e:	d12b      	bne.n	8004288 <__swbuf_r+0x70>
 8004230:	686c      	ldr	r4, [r5, #4]
 8004232:	69a3      	ldr	r3, [r4, #24]
 8004234:	60a3      	str	r3, [r4, #8]
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	071a      	lsls	r2, r3, #28
 800423a:	d52f      	bpl.n	800429c <__swbuf_r+0x84>
 800423c:	6923      	ldr	r3, [r4, #16]
 800423e:	b36b      	cbz	r3, 800429c <__swbuf_r+0x84>
 8004240:	6923      	ldr	r3, [r4, #16]
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	b2f6      	uxtb	r6, r6
 8004246:	1ac0      	subs	r0, r0, r3
 8004248:	6963      	ldr	r3, [r4, #20]
 800424a:	4637      	mov	r7, r6
 800424c:	4283      	cmp	r3, r0
 800424e:	dc04      	bgt.n	800425a <__swbuf_r+0x42>
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 f92e 	bl	80044b4 <_fflush_r>
 8004258:	bb30      	cbnz	r0, 80042a8 <__swbuf_r+0x90>
 800425a:	68a3      	ldr	r3, [r4, #8]
 800425c:	3001      	adds	r0, #1
 800425e:	3b01      	subs	r3, #1
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	6022      	str	r2, [r4, #0]
 8004268:	701e      	strb	r6, [r3, #0]
 800426a:	6963      	ldr	r3, [r4, #20]
 800426c:	4283      	cmp	r3, r0
 800426e:	d004      	beq.n	800427a <__swbuf_r+0x62>
 8004270:	89a3      	ldrh	r3, [r4, #12]
 8004272:	07db      	lsls	r3, r3, #31
 8004274:	d506      	bpl.n	8004284 <__swbuf_r+0x6c>
 8004276:	2e0a      	cmp	r6, #10
 8004278:	d104      	bne.n	8004284 <__swbuf_r+0x6c>
 800427a:	4621      	mov	r1, r4
 800427c:	4628      	mov	r0, r5
 800427e:	f000 f919 	bl	80044b4 <_fflush_r>
 8004282:	b988      	cbnz	r0, 80042a8 <__swbuf_r+0x90>
 8004284:	4638      	mov	r0, r7
 8004286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <__swbuf_r+0x9c>)
 800428a:	429c      	cmp	r4, r3
 800428c:	d101      	bne.n	8004292 <__swbuf_r+0x7a>
 800428e:	68ac      	ldr	r4, [r5, #8]
 8004290:	e7cf      	b.n	8004232 <__swbuf_r+0x1a>
 8004292:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <__swbuf_r+0xa0>)
 8004294:	429c      	cmp	r4, r3
 8004296:	bf08      	it	eq
 8004298:	68ec      	ldreq	r4, [r5, #12]
 800429a:	e7ca      	b.n	8004232 <__swbuf_r+0x1a>
 800429c:	4621      	mov	r1, r4
 800429e:	4628      	mov	r0, r5
 80042a0:	f000 f80c 	bl	80042bc <__swsetup_r>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d0cb      	beq.n	8004240 <__swbuf_r+0x28>
 80042a8:	f04f 37ff 	mov.w	r7, #4294967295
 80042ac:	e7ea      	b.n	8004284 <__swbuf_r+0x6c>
 80042ae:	bf00      	nop
 80042b0:	08004c10 	.word	0x08004c10
 80042b4:	08004c30 	.word	0x08004c30
 80042b8:	08004bf0 	.word	0x08004bf0

080042bc <__swsetup_r>:
 80042bc:	4b32      	ldr	r3, [pc, #200]	; (8004388 <__swsetup_r+0xcc>)
 80042be:	b570      	push	{r4, r5, r6, lr}
 80042c0:	681d      	ldr	r5, [r3, #0]
 80042c2:	4606      	mov	r6, r0
 80042c4:	460c      	mov	r4, r1
 80042c6:	b125      	cbz	r5, 80042d2 <__swsetup_r+0x16>
 80042c8:	69ab      	ldr	r3, [r5, #24]
 80042ca:	b913      	cbnz	r3, 80042d2 <__swsetup_r+0x16>
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 f985 	bl	80045dc <__sinit>
 80042d2:	4b2e      	ldr	r3, [pc, #184]	; (800438c <__swsetup_r+0xd0>)
 80042d4:	429c      	cmp	r4, r3
 80042d6:	d10f      	bne.n	80042f8 <__swsetup_r+0x3c>
 80042d8:	686c      	ldr	r4, [r5, #4]
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042e0:	0719      	lsls	r1, r3, #28
 80042e2:	d42c      	bmi.n	800433e <__swsetup_r+0x82>
 80042e4:	06dd      	lsls	r5, r3, #27
 80042e6:	d411      	bmi.n	800430c <__swsetup_r+0x50>
 80042e8:	2309      	movs	r3, #9
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	e03e      	b.n	8004376 <__swsetup_r+0xba>
 80042f8:	4b25      	ldr	r3, [pc, #148]	; (8004390 <__swsetup_r+0xd4>)
 80042fa:	429c      	cmp	r4, r3
 80042fc:	d101      	bne.n	8004302 <__swsetup_r+0x46>
 80042fe:	68ac      	ldr	r4, [r5, #8]
 8004300:	e7eb      	b.n	80042da <__swsetup_r+0x1e>
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <__swsetup_r+0xd8>)
 8004304:	429c      	cmp	r4, r3
 8004306:	bf08      	it	eq
 8004308:	68ec      	ldreq	r4, [r5, #12]
 800430a:	e7e6      	b.n	80042da <__swsetup_r+0x1e>
 800430c:	0758      	lsls	r0, r3, #29
 800430e:	d512      	bpl.n	8004336 <__swsetup_r+0x7a>
 8004310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004312:	b141      	cbz	r1, 8004326 <__swsetup_r+0x6a>
 8004314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004318:	4299      	cmp	r1, r3
 800431a:	d002      	beq.n	8004322 <__swsetup_r+0x66>
 800431c:	4630      	mov	r0, r6
 800431e:	f7ff fa7b 	bl	8003818 <_free_r>
 8004322:	2300      	movs	r3, #0
 8004324:	6363      	str	r3, [r4, #52]	; 0x34
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	2300      	movs	r3, #0
 8004330:	6063      	str	r3, [r4, #4]
 8004332:	6923      	ldr	r3, [r4, #16]
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	f043 0308 	orr.w	r3, r3, #8
 800433c:	81a3      	strh	r3, [r4, #12]
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	b94b      	cbnz	r3, 8004356 <__swsetup_r+0x9a>
 8004342:	89a3      	ldrh	r3, [r4, #12]
 8004344:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434c:	d003      	beq.n	8004356 <__swsetup_r+0x9a>
 800434e:	4621      	mov	r1, r4
 8004350:	4630      	mov	r0, r6
 8004352:	f000 fa07 	bl	8004764 <__smakebuf_r>
 8004356:	89a0      	ldrh	r0, [r4, #12]
 8004358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800435c:	f010 0301 	ands.w	r3, r0, #1
 8004360:	d00a      	beq.n	8004378 <__swsetup_r+0xbc>
 8004362:	2300      	movs	r3, #0
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	6963      	ldr	r3, [r4, #20]
 8004368:	425b      	negs	r3, r3
 800436a:	61a3      	str	r3, [r4, #24]
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	b943      	cbnz	r3, 8004382 <__swsetup_r+0xc6>
 8004370:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004374:	d1ba      	bne.n	80042ec <__swsetup_r+0x30>
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	0781      	lsls	r1, r0, #30
 800437a:	bf58      	it	pl
 800437c:	6963      	ldrpl	r3, [r4, #20]
 800437e:	60a3      	str	r3, [r4, #8]
 8004380:	e7f4      	b.n	800436c <__swsetup_r+0xb0>
 8004382:	2000      	movs	r0, #0
 8004384:	e7f7      	b.n	8004376 <__swsetup_r+0xba>
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c
 800438c:	08004c10 	.word	0x08004c10
 8004390:	08004c30 	.word	0x08004c30
 8004394:	08004bf0 	.word	0x08004bf0

08004398 <abort>:
 8004398:	2006      	movs	r0, #6
 800439a:	b508      	push	{r3, lr}
 800439c:	f000 fab2 	bl	8004904 <raise>
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7fc fad2 	bl	800094a <_exit>
	...

080043a8 <__sflush_r>:
 80043a8:	898a      	ldrh	r2, [r1, #12]
 80043aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ae:	4605      	mov	r5, r0
 80043b0:	0710      	lsls	r0, r2, #28
 80043b2:	460c      	mov	r4, r1
 80043b4:	d458      	bmi.n	8004468 <__sflush_r+0xc0>
 80043b6:	684b      	ldr	r3, [r1, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	dc05      	bgt.n	80043c8 <__sflush_r+0x20>
 80043bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	dc02      	bgt.n	80043c8 <__sflush_r+0x20>
 80043c2:	2000      	movs	r0, #0
 80043c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ca:	2e00      	cmp	r6, #0
 80043cc:	d0f9      	beq.n	80043c2 <__sflush_r+0x1a>
 80043ce:	2300      	movs	r3, #0
 80043d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043d4:	682f      	ldr	r7, [r5, #0]
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	d032      	beq.n	8004440 <__sflush_r+0x98>
 80043da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	075a      	lsls	r2, r3, #29
 80043e0:	d505      	bpl.n	80043ee <__sflush_r+0x46>
 80043e2:	6863      	ldr	r3, [r4, #4]
 80043e4:	1ac0      	subs	r0, r0, r3
 80043e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043e8:	b10b      	cbz	r3, 80043ee <__sflush_r+0x46>
 80043ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ec:	1ac0      	subs	r0, r0, r3
 80043ee:	2300      	movs	r3, #0
 80043f0:	4602      	mov	r2, r0
 80043f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043f4:	4628      	mov	r0, r5
 80043f6:	6a21      	ldr	r1, [r4, #32]
 80043f8:	47b0      	blx	r6
 80043fa:	1c43      	adds	r3, r0, #1
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	d106      	bne.n	800440e <__sflush_r+0x66>
 8004400:	6829      	ldr	r1, [r5, #0]
 8004402:	291d      	cmp	r1, #29
 8004404:	d82c      	bhi.n	8004460 <__sflush_r+0xb8>
 8004406:	4a2a      	ldr	r2, [pc, #168]	; (80044b0 <__sflush_r+0x108>)
 8004408:	40ca      	lsrs	r2, r1
 800440a:	07d6      	lsls	r6, r2, #31
 800440c:	d528      	bpl.n	8004460 <__sflush_r+0xb8>
 800440e:	2200      	movs	r2, #0
 8004410:	6062      	str	r2, [r4, #4]
 8004412:	6922      	ldr	r2, [r4, #16]
 8004414:	04d9      	lsls	r1, r3, #19
 8004416:	6022      	str	r2, [r4, #0]
 8004418:	d504      	bpl.n	8004424 <__sflush_r+0x7c>
 800441a:	1c42      	adds	r2, r0, #1
 800441c:	d101      	bne.n	8004422 <__sflush_r+0x7a>
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	b903      	cbnz	r3, 8004424 <__sflush_r+0x7c>
 8004422:	6560      	str	r0, [r4, #84]	; 0x54
 8004424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004426:	602f      	str	r7, [r5, #0]
 8004428:	2900      	cmp	r1, #0
 800442a:	d0ca      	beq.n	80043c2 <__sflush_r+0x1a>
 800442c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004430:	4299      	cmp	r1, r3
 8004432:	d002      	beq.n	800443a <__sflush_r+0x92>
 8004434:	4628      	mov	r0, r5
 8004436:	f7ff f9ef 	bl	8003818 <_free_r>
 800443a:	2000      	movs	r0, #0
 800443c:	6360      	str	r0, [r4, #52]	; 0x34
 800443e:	e7c1      	b.n	80043c4 <__sflush_r+0x1c>
 8004440:	6a21      	ldr	r1, [r4, #32]
 8004442:	2301      	movs	r3, #1
 8004444:	4628      	mov	r0, r5
 8004446:	47b0      	blx	r6
 8004448:	1c41      	adds	r1, r0, #1
 800444a:	d1c7      	bne.n	80043dc <__sflush_r+0x34>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0c4      	beq.n	80043dc <__sflush_r+0x34>
 8004452:	2b1d      	cmp	r3, #29
 8004454:	d001      	beq.n	800445a <__sflush_r+0xb2>
 8004456:	2b16      	cmp	r3, #22
 8004458:	d101      	bne.n	800445e <__sflush_r+0xb6>
 800445a:	602f      	str	r7, [r5, #0]
 800445c:	e7b1      	b.n	80043c2 <__sflush_r+0x1a>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004464:	81a3      	strh	r3, [r4, #12]
 8004466:	e7ad      	b.n	80043c4 <__sflush_r+0x1c>
 8004468:	690f      	ldr	r7, [r1, #16]
 800446a:	2f00      	cmp	r7, #0
 800446c:	d0a9      	beq.n	80043c2 <__sflush_r+0x1a>
 800446e:	0793      	lsls	r3, r2, #30
 8004470:	bf18      	it	ne
 8004472:	2300      	movne	r3, #0
 8004474:	680e      	ldr	r6, [r1, #0]
 8004476:	bf08      	it	eq
 8004478:	694b      	ldreq	r3, [r1, #20]
 800447a:	eba6 0807 	sub.w	r8, r6, r7
 800447e:	600f      	str	r7, [r1, #0]
 8004480:	608b      	str	r3, [r1, #8]
 8004482:	f1b8 0f00 	cmp.w	r8, #0
 8004486:	dd9c      	ble.n	80043c2 <__sflush_r+0x1a>
 8004488:	4643      	mov	r3, r8
 800448a:	463a      	mov	r2, r7
 800448c:	4628      	mov	r0, r5
 800448e:	6a21      	ldr	r1, [r4, #32]
 8004490:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004492:	47b0      	blx	r6
 8004494:	2800      	cmp	r0, #0
 8004496:	dc06      	bgt.n	80044a6 <__sflush_r+0xfe>
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	e78e      	b.n	80043c4 <__sflush_r+0x1c>
 80044a6:	4407      	add	r7, r0
 80044a8:	eba8 0800 	sub.w	r8, r8, r0
 80044ac:	e7e9      	b.n	8004482 <__sflush_r+0xda>
 80044ae:	bf00      	nop
 80044b0:	20400001 	.word	0x20400001

080044b4 <_fflush_r>:
 80044b4:	b538      	push	{r3, r4, r5, lr}
 80044b6:	690b      	ldr	r3, [r1, #16]
 80044b8:	4605      	mov	r5, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	b913      	cbnz	r3, 80044c4 <_fflush_r+0x10>
 80044be:	2500      	movs	r5, #0
 80044c0:	4628      	mov	r0, r5
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	b118      	cbz	r0, 80044ce <_fflush_r+0x1a>
 80044c6:	6983      	ldr	r3, [r0, #24]
 80044c8:	b90b      	cbnz	r3, 80044ce <_fflush_r+0x1a>
 80044ca:	f000 f887 	bl	80045dc <__sinit>
 80044ce:	4b14      	ldr	r3, [pc, #80]	; (8004520 <_fflush_r+0x6c>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d11b      	bne.n	800450c <_fflush_r+0x58>
 80044d4:	686c      	ldr	r4, [r5, #4]
 80044d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ef      	beq.n	80044be <_fflush_r+0xa>
 80044de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044e0:	07d0      	lsls	r0, r2, #31
 80044e2:	d404      	bmi.n	80044ee <_fflush_r+0x3a>
 80044e4:	0599      	lsls	r1, r3, #22
 80044e6:	d402      	bmi.n	80044ee <_fflush_r+0x3a>
 80044e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ea:	f000 f915 	bl	8004718 <__retarget_lock_acquire_recursive>
 80044ee:	4628      	mov	r0, r5
 80044f0:	4621      	mov	r1, r4
 80044f2:	f7ff ff59 	bl	80043a8 <__sflush_r>
 80044f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044f8:	4605      	mov	r5, r0
 80044fa:	07da      	lsls	r2, r3, #31
 80044fc:	d4e0      	bmi.n	80044c0 <_fflush_r+0xc>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	059b      	lsls	r3, r3, #22
 8004502:	d4dd      	bmi.n	80044c0 <_fflush_r+0xc>
 8004504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004506:	f000 f908 	bl	800471a <__retarget_lock_release_recursive>
 800450a:	e7d9      	b.n	80044c0 <_fflush_r+0xc>
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <_fflush_r+0x70>)
 800450e:	429c      	cmp	r4, r3
 8004510:	d101      	bne.n	8004516 <_fflush_r+0x62>
 8004512:	68ac      	ldr	r4, [r5, #8]
 8004514:	e7df      	b.n	80044d6 <_fflush_r+0x22>
 8004516:	4b04      	ldr	r3, [pc, #16]	; (8004528 <_fflush_r+0x74>)
 8004518:	429c      	cmp	r4, r3
 800451a:	bf08      	it	eq
 800451c:	68ec      	ldreq	r4, [r5, #12]
 800451e:	e7da      	b.n	80044d6 <_fflush_r+0x22>
 8004520:	08004c10 	.word	0x08004c10
 8004524:	08004c30 	.word	0x08004c30
 8004528:	08004bf0 	.word	0x08004bf0

0800452c <std>:
 800452c:	2300      	movs	r3, #0
 800452e:	b510      	push	{r4, lr}
 8004530:	4604      	mov	r4, r0
 8004532:	e9c0 3300 	strd	r3, r3, [r0]
 8004536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800453a:	6083      	str	r3, [r0, #8]
 800453c:	8181      	strh	r1, [r0, #12]
 800453e:	6643      	str	r3, [r0, #100]	; 0x64
 8004540:	81c2      	strh	r2, [r0, #14]
 8004542:	6183      	str	r3, [r0, #24]
 8004544:	4619      	mov	r1, r3
 8004546:	2208      	movs	r2, #8
 8004548:	305c      	adds	r0, #92	; 0x5c
 800454a:	f7ff f8a1 	bl	8003690 <memset>
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <std+0x38>)
 8004550:	6224      	str	r4, [r4, #32]
 8004552:	6263      	str	r3, [r4, #36]	; 0x24
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <std+0x3c>)
 8004556:	62a3      	str	r3, [r4, #40]	; 0x28
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <std+0x40>)
 800455a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <std+0x44>)
 800455e:	6323      	str	r3, [r4, #48]	; 0x30
 8004560:	bd10      	pop	{r4, pc}
 8004562:	bf00      	nop
 8004564:	0800493d 	.word	0x0800493d
 8004568:	0800495f 	.word	0x0800495f
 800456c:	08004997 	.word	0x08004997
 8004570:	080049bb 	.word	0x080049bb

08004574 <_cleanup_r>:
 8004574:	4901      	ldr	r1, [pc, #4]	; (800457c <_cleanup_r+0x8>)
 8004576:	f000 b8af 	b.w	80046d8 <_fwalk_reent>
 800457a:	bf00      	nop
 800457c:	080044b5 	.word	0x080044b5

08004580 <__sfmoreglue>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	2568      	movs	r5, #104	; 0x68
 8004584:	1e4a      	subs	r2, r1, #1
 8004586:	4355      	muls	r5, r2
 8004588:	460e      	mov	r6, r1
 800458a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800458e:	f7ff f98f 	bl	80038b0 <_malloc_r>
 8004592:	4604      	mov	r4, r0
 8004594:	b140      	cbz	r0, 80045a8 <__sfmoreglue+0x28>
 8004596:	2100      	movs	r1, #0
 8004598:	e9c0 1600 	strd	r1, r6, [r0]
 800459c:	300c      	adds	r0, #12
 800459e:	60a0      	str	r0, [r4, #8]
 80045a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045a4:	f7ff f874 	bl	8003690 <memset>
 80045a8:	4620      	mov	r0, r4
 80045aa:	bd70      	pop	{r4, r5, r6, pc}

080045ac <__sfp_lock_acquire>:
 80045ac:	4801      	ldr	r0, [pc, #4]	; (80045b4 <__sfp_lock_acquire+0x8>)
 80045ae:	f000 b8b3 	b.w	8004718 <__retarget_lock_acquire_recursive>
 80045b2:	bf00      	nop
 80045b4:	200002a0 	.word	0x200002a0

080045b8 <__sfp_lock_release>:
 80045b8:	4801      	ldr	r0, [pc, #4]	; (80045c0 <__sfp_lock_release+0x8>)
 80045ba:	f000 b8ae 	b.w	800471a <__retarget_lock_release_recursive>
 80045be:	bf00      	nop
 80045c0:	200002a0 	.word	0x200002a0

080045c4 <__sinit_lock_acquire>:
 80045c4:	4801      	ldr	r0, [pc, #4]	; (80045cc <__sinit_lock_acquire+0x8>)
 80045c6:	f000 b8a7 	b.w	8004718 <__retarget_lock_acquire_recursive>
 80045ca:	bf00      	nop
 80045cc:	2000029b 	.word	0x2000029b

080045d0 <__sinit_lock_release>:
 80045d0:	4801      	ldr	r0, [pc, #4]	; (80045d8 <__sinit_lock_release+0x8>)
 80045d2:	f000 b8a2 	b.w	800471a <__retarget_lock_release_recursive>
 80045d6:	bf00      	nop
 80045d8:	2000029b 	.word	0x2000029b

080045dc <__sinit>:
 80045dc:	b510      	push	{r4, lr}
 80045de:	4604      	mov	r4, r0
 80045e0:	f7ff fff0 	bl	80045c4 <__sinit_lock_acquire>
 80045e4:	69a3      	ldr	r3, [r4, #24]
 80045e6:	b11b      	cbz	r3, 80045f0 <__sinit+0x14>
 80045e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ec:	f7ff bff0 	b.w	80045d0 <__sinit_lock_release>
 80045f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045f4:	6523      	str	r3, [r4, #80]	; 0x50
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <__sinit+0x68>)
 80045f8:	4a13      	ldr	r2, [pc, #76]	; (8004648 <__sinit+0x6c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80045fe:	42a3      	cmp	r3, r4
 8004600:	bf08      	it	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	4620      	mov	r0, r4
 8004606:	bf08      	it	eq
 8004608:	61a3      	streq	r3, [r4, #24]
 800460a:	f000 f81f 	bl	800464c <__sfp>
 800460e:	6060      	str	r0, [r4, #4]
 8004610:	4620      	mov	r0, r4
 8004612:	f000 f81b 	bl	800464c <__sfp>
 8004616:	60a0      	str	r0, [r4, #8]
 8004618:	4620      	mov	r0, r4
 800461a:	f000 f817 	bl	800464c <__sfp>
 800461e:	2200      	movs	r2, #0
 8004620:	2104      	movs	r1, #4
 8004622:	60e0      	str	r0, [r4, #12]
 8004624:	6860      	ldr	r0, [r4, #4]
 8004626:	f7ff ff81 	bl	800452c <std>
 800462a:	2201      	movs	r2, #1
 800462c:	2109      	movs	r1, #9
 800462e:	68a0      	ldr	r0, [r4, #8]
 8004630:	f7ff ff7c 	bl	800452c <std>
 8004634:	2202      	movs	r2, #2
 8004636:	2112      	movs	r1, #18
 8004638:	68e0      	ldr	r0, [r4, #12]
 800463a:	f7ff ff77 	bl	800452c <std>
 800463e:	2301      	movs	r3, #1
 8004640:	61a3      	str	r3, [r4, #24]
 8004642:	e7d1      	b.n	80045e8 <__sinit+0xc>
 8004644:	08004b04 	.word	0x08004b04
 8004648:	08004575 	.word	0x08004575

0800464c <__sfp>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	4607      	mov	r7, r0
 8004650:	f7ff ffac 	bl	80045ac <__sfp_lock_acquire>
 8004654:	4b1e      	ldr	r3, [pc, #120]	; (80046d0 <__sfp+0x84>)
 8004656:	681e      	ldr	r6, [r3, #0]
 8004658:	69b3      	ldr	r3, [r6, #24]
 800465a:	b913      	cbnz	r3, 8004662 <__sfp+0x16>
 800465c:	4630      	mov	r0, r6
 800465e:	f7ff ffbd 	bl	80045dc <__sinit>
 8004662:	3648      	adds	r6, #72	; 0x48
 8004664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004668:	3b01      	subs	r3, #1
 800466a:	d503      	bpl.n	8004674 <__sfp+0x28>
 800466c:	6833      	ldr	r3, [r6, #0]
 800466e:	b30b      	cbz	r3, 80046b4 <__sfp+0x68>
 8004670:	6836      	ldr	r6, [r6, #0]
 8004672:	e7f7      	b.n	8004664 <__sfp+0x18>
 8004674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004678:	b9d5      	cbnz	r5, 80046b0 <__sfp+0x64>
 800467a:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <__sfp+0x88>)
 800467c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004680:	60e3      	str	r3, [r4, #12]
 8004682:	6665      	str	r5, [r4, #100]	; 0x64
 8004684:	f000 f847 	bl	8004716 <__retarget_lock_init_recursive>
 8004688:	f7ff ff96 	bl	80045b8 <__sfp_lock_release>
 800468c:	2208      	movs	r2, #8
 800468e:	4629      	mov	r1, r5
 8004690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004698:	6025      	str	r5, [r4, #0]
 800469a:	61a5      	str	r5, [r4, #24]
 800469c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046a0:	f7fe fff6 	bl	8003690 <memset>
 80046a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046ac:	4620      	mov	r0, r4
 80046ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046b0:	3468      	adds	r4, #104	; 0x68
 80046b2:	e7d9      	b.n	8004668 <__sfp+0x1c>
 80046b4:	2104      	movs	r1, #4
 80046b6:	4638      	mov	r0, r7
 80046b8:	f7ff ff62 	bl	8004580 <__sfmoreglue>
 80046bc:	4604      	mov	r4, r0
 80046be:	6030      	str	r0, [r6, #0]
 80046c0:	2800      	cmp	r0, #0
 80046c2:	d1d5      	bne.n	8004670 <__sfp+0x24>
 80046c4:	f7ff ff78 	bl	80045b8 <__sfp_lock_release>
 80046c8:	230c      	movs	r3, #12
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	e7ee      	b.n	80046ac <__sfp+0x60>
 80046ce:	bf00      	nop
 80046d0:	08004b04 	.word	0x08004b04
 80046d4:	ffff0001 	.word	0xffff0001

080046d8 <_fwalk_reent>:
 80046d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046dc:	4606      	mov	r6, r0
 80046de:	4688      	mov	r8, r1
 80046e0:	2700      	movs	r7, #0
 80046e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046ea:	f1b9 0901 	subs.w	r9, r9, #1
 80046ee:	d505      	bpl.n	80046fc <_fwalk_reent+0x24>
 80046f0:	6824      	ldr	r4, [r4, #0]
 80046f2:	2c00      	cmp	r4, #0
 80046f4:	d1f7      	bne.n	80046e6 <_fwalk_reent+0xe>
 80046f6:	4638      	mov	r0, r7
 80046f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046fc:	89ab      	ldrh	r3, [r5, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d907      	bls.n	8004712 <_fwalk_reent+0x3a>
 8004702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004706:	3301      	adds	r3, #1
 8004708:	d003      	beq.n	8004712 <_fwalk_reent+0x3a>
 800470a:	4629      	mov	r1, r5
 800470c:	4630      	mov	r0, r6
 800470e:	47c0      	blx	r8
 8004710:	4307      	orrs	r7, r0
 8004712:	3568      	adds	r5, #104	; 0x68
 8004714:	e7e9      	b.n	80046ea <_fwalk_reent+0x12>

08004716 <__retarget_lock_init_recursive>:
 8004716:	4770      	bx	lr

08004718 <__retarget_lock_acquire_recursive>:
 8004718:	4770      	bx	lr

0800471a <__retarget_lock_release_recursive>:
 800471a:	4770      	bx	lr

0800471c <__swhatbuf_r>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	460e      	mov	r6, r1
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	4614      	mov	r4, r2
 8004726:	2900      	cmp	r1, #0
 8004728:	461d      	mov	r5, r3
 800472a:	b096      	sub	sp, #88	; 0x58
 800472c:	da07      	bge.n	800473e <__swhatbuf_r+0x22>
 800472e:	2300      	movs	r3, #0
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	89b3      	ldrh	r3, [r6, #12]
 8004734:	061a      	lsls	r2, r3, #24
 8004736:	d410      	bmi.n	800475a <__swhatbuf_r+0x3e>
 8004738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800473c:	e00e      	b.n	800475c <__swhatbuf_r+0x40>
 800473e:	466a      	mov	r2, sp
 8004740:	f000 f962 	bl	8004a08 <_fstat_r>
 8004744:	2800      	cmp	r0, #0
 8004746:	dbf2      	blt.n	800472e <__swhatbuf_r+0x12>
 8004748:	9a01      	ldr	r2, [sp, #4]
 800474a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800474e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004752:	425a      	negs	r2, r3
 8004754:	415a      	adcs	r2, r3
 8004756:	602a      	str	r2, [r5, #0]
 8004758:	e7ee      	b.n	8004738 <__swhatbuf_r+0x1c>
 800475a:	2340      	movs	r3, #64	; 0x40
 800475c:	2000      	movs	r0, #0
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	b016      	add	sp, #88	; 0x58
 8004762:	bd70      	pop	{r4, r5, r6, pc}

08004764 <__smakebuf_r>:
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004768:	079d      	lsls	r5, r3, #30
 800476a:	4606      	mov	r6, r0
 800476c:	460c      	mov	r4, r1
 800476e:	d507      	bpl.n	8004780 <__smakebuf_r+0x1c>
 8004770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	2301      	movs	r3, #1
 800477a:	6163      	str	r3, [r4, #20]
 800477c:	b002      	add	sp, #8
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	466a      	mov	r2, sp
 8004782:	ab01      	add	r3, sp, #4
 8004784:	f7ff ffca 	bl	800471c <__swhatbuf_r>
 8004788:	9900      	ldr	r1, [sp, #0]
 800478a:	4605      	mov	r5, r0
 800478c:	4630      	mov	r0, r6
 800478e:	f7ff f88f 	bl	80038b0 <_malloc_r>
 8004792:	b948      	cbnz	r0, 80047a8 <__smakebuf_r+0x44>
 8004794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004798:	059a      	lsls	r2, r3, #22
 800479a:	d4ef      	bmi.n	800477c <__smakebuf_r+0x18>
 800479c:	f023 0303 	bic.w	r3, r3, #3
 80047a0:	f043 0302 	orr.w	r3, r3, #2
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	e7e3      	b.n	8004770 <__smakebuf_r+0xc>
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <__smakebuf_r+0x7c>)
 80047aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	6020      	str	r0, [r4, #0]
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	9b00      	ldr	r3, [sp, #0]
 80047b8:	6120      	str	r0, [r4, #16]
 80047ba:	6163      	str	r3, [r4, #20]
 80047bc:	9b01      	ldr	r3, [sp, #4]
 80047be:	b15b      	cbz	r3, 80047d8 <__smakebuf_r+0x74>
 80047c0:	4630      	mov	r0, r6
 80047c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047c6:	f000 f931 	bl	8004a2c <_isatty_r>
 80047ca:	b128      	cbz	r0, 80047d8 <__smakebuf_r+0x74>
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	89a0      	ldrh	r0, [r4, #12]
 80047da:	4305      	orrs	r5, r0
 80047dc:	81a5      	strh	r5, [r4, #12]
 80047de:	e7cd      	b.n	800477c <__smakebuf_r+0x18>
 80047e0:	08004575 	.word	0x08004575

080047e4 <memchr>:
 80047e4:	4603      	mov	r3, r0
 80047e6:	b510      	push	{r4, lr}
 80047e8:	b2c9      	uxtb	r1, r1
 80047ea:	4402      	add	r2, r0
 80047ec:	4293      	cmp	r3, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	d101      	bne.n	80047f6 <memchr+0x12>
 80047f2:	2000      	movs	r0, #0
 80047f4:	e003      	b.n	80047fe <memchr+0x1a>
 80047f6:	7804      	ldrb	r4, [r0, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	428c      	cmp	r4, r1
 80047fc:	d1f6      	bne.n	80047ec <memchr+0x8>
 80047fe:	bd10      	pop	{r4, pc}

08004800 <memcpy>:
 8004800:	440a      	add	r2, r1
 8004802:	4291      	cmp	r1, r2
 8004804:	f100 33ff 	add.w	r3, r0, #4294967295
 8004808:	d100      	bne.n	800480c <memcpy+0xc>
 800480a:	4770      	bx	lr
 800480c:	b510      	push	{r4, lr}
 800480e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004812:	4291      	cmp	r1, r2
 8004814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004818:	d1f9      	bne.n	800480e <memcpy+0xe>
 800481a:	bd10      	pop	{r4, pc}

0800481c <memmove>:
 800481c:	4288      	cmp	r0, r1
 800481e:	b510      	push	{r4, lr}
 8004820:	eb01 0402 	add.w	r4, r1, r2
 8004824:	d902      	bls.n	800482c <memmove+0x10>
 8004826:	4284      	cmp	r4, r0
 8004828:	4623      	mov	r3, r4
 800482a:	d807      	bhi.n	800483c <memmove+0x20>
 800482c:	1e43      	subs	r3, r0, #1
 800482e:	42a1      	cmp	r1, r4
 8004830:	d008      	beq.n	8004844 <memmove+0x28>
 8004832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483a:	e7f8      	b.n	800482e <memmove+0x12>
 800483c:	4601      	mov	r1, r0
 800483e:	4402      	add	r2, r0
 8004840:	428a      	cmp	r2, r1
 8004842:	d100      	bne.n	8004846 <memmove+0x2a>
 8004844:	bd10      	pop	{r4, pc}
 8004846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800484a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800484e:	e7f7      	b.n	8004840 <memmove+0x24>

08004850 <__malloc_lock>:
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <__malloc_lock+0x8>)
 8004852:	f7ff bf61 	b.w	8004718 <__retarget_lock_acquire_recursive>
 8004856:	bf00      	nop
 8004858:	2000029c 	.word	0x2000029c

0800485c <__malloc_unlock>:
 800485c:	4801      	ldr	r0, [pc, #4]	; (8004864 <__malloc_unlock+0x8>)
 800485e:	f7ff bf5c 	b.w	800471a <__retarget_lock_release_recursive>
 8004862:	bf00      	nop
 8004864:	2000029c 	.word	0x2000029c

08004868 <_realloc_r>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	4607      	mov	r7, r0
 800486c:	4614      	mov	r4, r2
 800486e:	460e      	mov	r6, r1
 8004870:	b921      	cbnz	r1, 800487c <_realloc_r+0x14>
 8004872:	4611      	mov	r1, r2
 8004874:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004878:	f7ff b81a 	b.w	80038b0 <_malloc_r>
 800487c:	b922      	cbnz	r2, 8004888 <_realloc_r+0x20>
 800487e:	f7fe ffcb 	bl	8003818 <_free_r>
 8004882:	4625      	mov	r5, r4
 8004884:	4628      	mov	r0, r5
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004888:	f000 f8f2 	bl	8004a70 <_malloc_usable_size_r>
 800488c:	42a0      	cmp	r0, r4
 800488e:	d20f      	bcs.n	80048b0 <_realloc_r+0x48>
 8004890:	4621      	mov	r1, r4
 8004892:	4638      	mov	r0, r7
 8004894:	f7ff f80c 	bl	80038b0 <_malloc_r>
 8004898:	4605      	mov	r5, r0
 800489a:	2800      	cmp	r0, #0
 800489c:	d0f2      	beq.n	8004884 <_realloc_r+0x1c>
 800489e:	4631      	mov	r1, r6
 80048a0:	4622      	mov	r2, r4
 80048a2:	f7ff ffad 	bl	8004800 <memcpy>
 80048a6:	4631      	mov	r1, r6
 80048a8:	4638      	mov	r0, r7
 80048aa:	f7fe ffb5 	bl	8003818 <_free_r>
 80048ae:	e7e9      	b.n	8004884 <_realloc_r+0x1c>
 80048b0:	4635      	mov	r5, r6
 80048b2:	e7e7      	b.n	8004884 <_realloc_r+0x1c>

080048b4 <_raise_r>:
 80048b4:	291f      	cmp	r1, #31
 80048b6:	b538      	push	{r3, r4, r5, lr}
 80048b8:	4604      	mov	r4, r0
 80048ba:	460d      	mov	r5, r1
 80048bc:	d904      	bls.n	80048c8 <_raise_r+0x14>
 80048be:	2316      	movs	r3, #22
 80048c0:	6003      	str	r3, [r0, #0]
 80048c2:	f04f 30ff 	mov.w	r0, #4294967295
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048ca:	b112      	cbz	r2, 80048d2 <_raise_r+0x1e>
 80048cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048d0:	b94b      	cbnz	r3, 80048e6 <_raise_r+0x32>
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 f830 	bl	8004938 <_getpid_r>
 80048d8:	462a      	mov	r2, r5
 80048da:	4601      	mov	r1, r0
 80048dc:	4620      	mov	r0, r4
 80048de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e2:	f000 b817 	b.w	8004914 <_kill_r>
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d00a      	beq.n	8004900 <_raise_r+0x4c>
 80048ea:	1c59      	adds	r1, r3, #1
 80048ec:	d103      	bne.n	80048f6 <_raise_r+0x42>
 80048ee:	2316      	movs	r3, #22
 80048f0:	6003      	str	r3, [r0, #0]
 80048f2:	2001      	movs	r0, #1
 80048f4:	e7e7      	b.n	80048c6 <_raise_r+0x12>
 80048f6:	2400      	movs	r4, #0
 80048f8:	4628      	mov	r0, r5
 80048fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80048fe:	4798      	blx	r3
 8004900:	2000      	movs	r0, #0
 8004902:	e7e0      	b.n	80048c6 <_raise_r+0x12>

08004904 <raise>:
 8004904:	4b02      	ldr	r3, [pc, #8]	; (8004910 <raise+0xc>)
 8004906:	4601      	mov	r1, r0
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	f7ff bfd3 	b.w	80048b4 <_raise_r>
 800490e:	bf00      	nop
 8004910:	2000000c 	.word	0x2000000c

08004914 <_kill_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	2300      	movs	r3, #0
 8004918:	4d06      	ldr	r5, [pc, #24]	; (8004934 <_kill_r+0x20>)
 800491a:	4604      	mov	r4, r0
 800491c:	4608      	mov	r0, r1
 800491e:	4611      	mov	r1, r2
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	f7fc f802 	bl	800092a <_kill>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	d102      	bne.n	8004930 <_kill_r+0x1c>
 800492a:	682b      	ldr	r3, [r5, #0]
 800492c:	b103      	cbz	r3, 8004930 <_kill_r+0x1c>
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	bd38      	pop	{r3, r4, r5, pc}
 8004932:	bf00      	nop
 8004934:	200002a4 	.word	0x200002a4

08004938 <_getpid_r>:
 8004938:	f7fb bff0 	b.w	800091c <_getpid>

0800493c <__sread>:
 800493c:	b510      	push	{r4, lr}
 800493e:	460c      	mov	r4, r1
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	f000 f89c 	bl	8004a80 <_read_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	bfab      	itete	ge
 800494c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800494e:	89a3      	ldrhlt	r3, [r4, #12]
 8004950:	181b      	addge	r3, r3, r0
 8004952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004956:	bfac      	ite	ge
 8004958:	6563      	strge	r3, [r4, #84]	; 0x54
 800495a:	81a3      	strhlt	r3, [r4, #12]
 800495c:	bd10      	pop	{r4, pc}

0800495e <__swrite>:
 800495e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004962:	461f      	mov	r7, r3
 8004964:	898b      	ldrh	r3, [r1, #12]
 8004966:	4605      	mov	r5, r0
 8004968:	05db      	lsls	r3, r3, #23
 800496a:	460c      	mov	r4, r1
 800496c:	4616      	mov	r6, r2
 800496e:	d505      	bpl.n	800497c <__swrite+0x1e>
 8004970:	2302      	movs	r3, #2
 8004972:	2200      	movs	r2, #0
 8004974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004978:	f000 f868 	bl	8004a4c <_lseek_r>
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	4632      	mov	r2, r6
 8004980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	4628      	mov	r0, r5
 8004988:	463b      	mov	r3, r7
 800498a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800498e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004992:	f000 b817 	b.w	80049c4 <_write_r>

08004996 <__sseek>:
 8004996:	b510      	push	{r4, lr}
 8004998:	460c      	mov	r4, r1
 800499a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499e:	f000 f855 	bl	8004a4c <_lseek_r>
 80049a2:	1c43      	adds	r3, r0, #1
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	bf15      	itete	ne
 80049a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80049aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049b2:	81a3      	strheq	r3, [r4, #12]
 80049b4:	bf18      	it	ne
 80049b6:	81a3      	strhne	r3, [r4, #12]
 80049b8:	bd10      	pop	{r4, pc}

080049ba <__sclose>:
 80049ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049be:	f000 b813 	b.w	80049e8 <_close_r>
	...

080049c4 <_write_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	2200      	movs	r2, #0
 80049ce:	4d05      	ldr	r5, [pc, #20]	; (80049e4 <_write_r+0x20>)
 80049d0:	602a      	str	r2, [r5, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f7fb ffe0 	bl	8000998 <_write>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_write_r+0x1e>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_write_r+0x1e>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	200002a4 	.word	0x200002a4

080049e8 <_close_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	2300      	movs	r3, #0
 80049ec:	4d05      	ldr	r5, [pc, #20]	; (8004a04 <_close_r+0x1c>)
 80049ee:	4604      	mov	r4, r0
 80049f0:	4608      	mov	r0, r1
 80049f2:	602b      	str	r3, [r5, #0]
 80049f4:	f7fb ffec 	bl	80009d0 <_close>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_close_r+0x1a>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_close_r+0x1a>
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	200002a4 	.word	0x200002a4

08004a08 <_fstat_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	4d06      	ldr	r5, [pc, #24]	; (8004a28 <_fstat_r+0x20>)
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	4611      	mov	r1, r2
 8004a14:	602b      	str	r3, [r5, #0]
 8004a16:	f7fb ffe6 	bl	80009e6 <_fstat>
 8004a1a:	1c43      	adds	r3, r0, #1
 8004a1c:	d102      	bne.n	8004a24 <_fstat_r+0x1c>
 8004a1e:	682b      	ldr	r3, [r5, #0]
 8004a20:	b103      	cbz	r3, 8004a24 <_fstat_r+0x1c>
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	bf00      	nop
 8004a28:	200002a4 	.word	0x200002a4

08004a2c <_isatty_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4d05      	ldr	r5, [pc, #20]	; (8004a48 <_isatty_r+0x1c>)
 8004a32:	4604      	mov	r4, r0
 8004a34:	4608      	mov	r0, r1
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	f7fb ffe4 	bl	8000a04 <_isatty>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d102      	bne.n	8004a46 <_isatty_r+0x1a>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	b103      	cbz	r3, 8004a46 <_isatty_r+0x1a>
 8004a44:	6023      	str	r3, [r4, #0]
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	200002a4 	.word	0x200002a4

08004a4c <_lseek_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	4611      	mov	r1, r2
 8004a54:	2200      	movs	r2, #0
 8004a56:	4d05      	ldr	r5, [pc, #20]	; (8004a6c <_lseek_r+0x20>)
 8004a58:	602a      	str	r2, [r5, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f7fb ffdc 	bl	8000a18 <_lseek>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d102      	bne.n	8004a6a <_lseek_r+0x1e>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	b103      	cbz	r3, 8004a6a <_lseek_r+0x1e>
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	bd38      	pop	{r3, r4, r5, pc}
 8004a6c:	200002a4 	.word	0x200002a4

08004a70 <_malloc_usable_size_r>:
 8004a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a74:	1f18      	subs	r0, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbc      	itt	lt
 8004a7a:	580b      	ldrlt	r3, [r1, r0]
 8004a7c:	18c0      	addlt	r0, r0, r3
 8004a7e:	4770      	bx	lr

08004a80 <_read_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	2200      	movs	r2, #0
 8004a8a:	4d05      	ldr	r5, [pc, #20]	; (8004aa0 <_read_r+0x20>)
 8004a8c:	602a      	str	r2, [r5, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f7fb ff65 	bl	800095e <_read>
 8004a94:	1c43      	adds	r3, r0, #1
 8004a96:	d102      	bne.n	8004a9e <_read_r+0x1e>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	b103      	cbz	r3, 8004a9e <_read_r+0x1e>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	200002a4 	.word	0x200002a4

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
